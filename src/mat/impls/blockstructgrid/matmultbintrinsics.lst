/home/dpnkarthik/petsc-rnet/PETSC_RNET/bin/mpicc -o matmultbintrinsics.o -c -O3 -O  -msse3 -g -Wa,-alhd  -I/home/dpnkarthik/petsc-rnet/include -I/home/dpnkarthik/petsc-rnet/PETSC_RNET/include -I/home/dpnkarthik/softwares/cuda/include    -D__INSDIR__=src/mat/impls/blockstructgrid  matmultbintrinsics.c
GAS LISTING /tmp/cc55sAij.s 			page 1


   1              		.file	"matmultbintrinsics.c"
   9              	.Ltext0:
  10              	.globl BSG_MatMult_2_ver1
  12              	BSG_MatMult_2_ver1:
  13              	.LFB588:
  14              		.file 1 "matmultbintrinsics.c"
   0:matmultbintrinsics.c **** #include <string.h>
   1:matmultbintrinsics.c **** #include <immintrin.h>
   2:matmultbintrinsics.c **** 
   3:matmultbintrinsics.c **** //#define SPREFETCH
   4:matmultbintrinsics.c **** 
   5:matmultbintrinsics.c **** 
   6:matmultbintrinsics.c **** 
   7:matmultbintrinsics.c **** #include "../src/mat/impls/blockstructgrid/matblockstructgrid.h"
   8:matmultbintrinsics.c **** 
   9:matmultbintrinsics.c **** /*  -------------------------------------------------------------------- 
  10:matmultbintrinsics.c ****      This file implements matrix multiplication for the structgrid data type. 
  11:matmultbintrinsics.c ****      The routine employs SSE/AVX intrinsics if they are available on the machine.
  12:matmultbintrinsics.c ****      Otherwise, the computations default to normal PetscScalar operations. 
  13:matmultbintrinsics.c ****      The instruction for fused addmultiply has not been implemented of date.
  14:matmultbintrinsics.c **** 
  15:matmultbintrinsics.c ****      Author: Chekuri S. Choudary, RNET
  16:matmultbintrinsics.c **** */
  17:matmultbintrinsics.c **** 
  18:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
  19:matmultbintrinsics.c **** {
  15              		.loc 1 20 0
  16              		.cfi_startproc
  17              	.LVL0:
  18 0000 4157     		pushq	%r15
  19              		.cfi_def_cfa_offset 16
  20              		.cfi_offset 15, -16
  21 0002 4156     		pushq	%r14
  22              		.cfi_def_cfa_offset 24
  23              		.cfi_offset 14, -24
  24 0004 4155     		pushq	%r13
  25              		.cfi_def_cfa_offset 32
  26              		.cfi_offset 13, -32
  27 0006 4154     		pushq	%r12
  28              		.cfi_def_cfa_offset 40
  29              		.cfi_offset 12, -40
  30 0008 55       		pushq	%rbp
  31              		.cfi_def_cfa_offset 48
  32              		.cfi_offset 6, -48
  33 0009 53       		pushq	%rbx
  34              		.cfi_def_cfa_offset 56
  35              		.cfi_offset 3, -56
  36 000a 4883EC50 		subq	$80, %rsp
  37              		.cfi_def_cfa_offset 136
  38 000e 448B9424 		movl	168(%rsp), %r10d
  38      A8000000 
  39 0016 448BB424 		movl	184(%rsp), %r14d
  39      B8000000 
  40              	.LVL1:
  20:matmultbintrinsics.c **** 	PetscInt i,j,k,l, t1, t2;
  21:matmultbintrinsics.c **** 	PetscInt lda3 = m;
  22:matmultbintrinsics.c **** 	PetscInt lda2 = lda3 * n;
GAS LISTING /tmp/cc55sAij.s 			page 2


  41              		.loc 1 23 0
  42 001e 8B842488 		movl	136(%rsp), %eax
  42      000000
  43 0025 0FAF8424 		imull	144(%rsp), %eax
  43      90000000 
  44 002d 89442490 		movl	%eax, -112(%rsp)
  45              	.LVL2:
  23:matmultbintrinsics.c **** 	PetscInt lda1 = lda2 * p;
  46              		.loc 1 24 0
  47 0031 0FAF8424 		imull	152(%rsp), %eax
  47      98000000 
  48              	.LVL3:
  49 0039 894424C4 		movl	%eax, -60(%rsp)
  50              	.LVL4:
  51 003d 4889FB   		movq	%rdi, %rbx
  52 0040 B8000000 		movl	$0, %eax
  52      00
  53              	.LVL5:
  24:matmultbintrinsics.c **** 	PetscInt mnos = dim;
  25:matmultbintrinsics.c **** 	const PetscScalar *xt[7];
  26:matmultbintrinsics.c **** 	const MatScalar   *ct[7];
  27:matmultbintrinsics.c **** 	PetscScalar sum0, sum1, x0, x1;
  28:matmultbintrinsics.c **** 	for(l=0;l<3;l++)
  29:matmultbintrinsics.c **** 	{
  30:matmultbintrinsics.c **** 		xt[l] = x;
  54              		.loc 1 31 0
  55 0045 4C8D6C24 		leaq	8(%rsp), %r13
  55      08
  31:matmultbintrinsics.c **** 		ct[l] = coeff[l] - (idx[l] + idy[l]*lda3 + idz[l]*lda2)*bs;
  56              		.loc 1 32 0
  57 004a 4C8D6424 		leaq	-56(%rsp), %r12
  57      C8
  58 004f 448BBC24 		movl	136(%rsp), %r15d
  58      88000000 
  59              	.LVL6:
  60              	.L2:
  31:matmultbintrinsics.c **** 		ct[l] = coeff[l] - (idx[l] + idy[l]*lda3 + idz[l]*lda2)*bs;
  61              		.loc 1 31 0
  62 0057 49897445 		movq	%rsi, 0(%r13,%rax,2)
  62      00
  63              		.loc 1 32 0
  64 005c 4589FB   		movl	%r15d, %r11d
  65 005f 450FAF1C 		imull	(%r8,%rax), %r11d
  65      00
  66 0064 44031C01 		addl	(%rcx,%rax), %r11d
  67 0068 8B6C2490 		movl	-112(%rsp), %ebp
  68 006c 410FAF2C 		imull	(%r9,%rax), %ebp
  68      01
  69 0071 418D2C2B 		leal	(%r11,%rbp), %ebp
  70 0075 410FAFEE 		imull	%r14d, %ebp
  71 0079 4863ED   		movslq	%ebp, %rbp
  72 007c 48C1E503 		salq	$3, %rbp
  73 0080 48F7DD   		negq	%rbp
  74 0083 48032B   		addq	(%rbx), %rbp
  75 0086 49892C44 		movq	%rbp, (%r12,%rax,2)
  76 008a 4883C308 		addq	$8, %rbx
  77 008e 4883C004 		addq	$4, %rax
GAS LISTING /tmp/cc55sAij.s 			page 3


  29:matmultbintrinsics.c **** 	for(l=0;l<3;l++)
  78              		.loc 1 29 0
  79 0092 4883F80C 		cmpq	$12, %rax
  80 0096 75BF     		jne	.L2
  81 0098 B000     		movb	$0, %al
  32:matmultbintrinsics.c **** 	}
  33:matmultbintrinsics.c **** 	for(;l<7;l++)
  34:matmultbintrinsics.c **** 	{
  35:matmultbintrinsics.c **** 		xt[l] = x + (idx[l] + idy[l]*lda3 + idz[l]*lda2)*dof;
  82              		.loc 1 36 0
  83 009a 4C8D6424 		leaq	8(%rsp), %r12
  83      08
  36:matmultbintrinsics.c **** 		ct[l] = coeff[l];
  84              		.loc 1 37 0
  85 009f 4C8D5C24 		leaq	-56(%rsp), %r11
  85      C8
  86 00a4 448B6C24 		movl	-112(%rsp), %r13d
  86      90
  87 00a9 448BB424 		movl	136(%rsp), %r14d
  87      88000000 
  88 00b1 448BBC24 		movl	160(%rsp), %r15d
  88      A0000000 
  89              	.L3:
  36:matmultbintrinsics.c **** 		ct[l] = coeff[l];
  90              		.loc 1 36 0
  91 00b9 4489F5   		movl	%r14d, %ebp
  92 00bc 410FAF6C 		imull	12(%r8,%rax), %ebp
  92      000C
  93 00c2 036C010C 		addl	12(%rcx,%rax), %ebp
  94 00c6 4489EB   		movl	%r13d, %ebx
  95 00c9 410FAF5C 		imull	12(%r9,%rax), %ebx
  95      010C
  96 00cf 8D5C1D00 		leal	0(%rbp,%rbx), %ebx
  97 00d3 410FAFDF 		imull	%r15d, %ebx
  98 00d7 4863DB   		movslq	%ebx, %rbx
  99 00da 488D1CDE 		leaq	(%rsi,%rbx,8), %rbx
 100 00de 49895C44 		movq	%rbx, 24(%r12,%rax,2)
 100      18
 101              		.loc 1 37 0
 102 00e3 488B5C47 		movq	24(%rdi,%rax,2), %rbx
 102      18
 103 00e8 49895C43 		movq	%rbx, 24(%r11,%rax,2)
 103      18
 104 00ed 4883C004 		addq	$4, %rax
  34:matmultbintrinsics.c **** 	for(;l<7;l++)
 105              		.loc 1 34 0
 106 00f1 4883F810 		cmpq	$16, %rax
 107 00f5 75C2     		jne	.L3
 108              	.LVL7:
  37:matmultbintrinsics.c **** 	}
  38:matmultbintrinsics.c **** 	
  39:matmultbintrinsics.c **** 	for(k = 0; k < 1; k++)
  40:matmultbintrinsics.c **** 	{
  41:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
  42:matmultbintrinsics.c **** 		for(l=mnos;l<nos;l++)
 109              		.loc 1 43 0
 110 00f7 660F57D2 		xorpd	%xmm2, %xmm2
GAS LISTING /tmp/cc55sAij.s 			page 4


 111 00fb 660F28DA 		movapd	%xmm2, %xmm3
 112 00ff 44399424 		cmpl	%r10d, 176(%rsp)
 112      B0000000 
 113 0107 7D58     		jge	.L5
 114 0109 8B8C24B0 		movl	176(%rsp), %ecx
 114      000000
 115              	.LVL8:
 116 0110 660F57D2 		xorpd	%xmm2, %xmm2
 117 0114 660F28DA 		movapd	%xmm2, %xmm3
 118              	.LVL9:
 119              	.L6:
  43:matmultbintrinsics.c **** 		{
  44:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 120              		.loc 1 45 0
 121 0118 4863C1   		movslq	%ecx, %rax
 122 011b 488B5CC4 		movq	8(%rsp,%rax,8), %rbx
 122      08
 123 0120 F20F100B 		movsd	(%rbx), %xmm1
 124              	.LVL10:
 125 0124 F20F1043 		movsd	8(%rbx), %xmm0
 125      08
 126              	.LVL11:
  45:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 127              		.loc 1 46 0
 128 0129 488B44C4 		movq	-56(%rsp,%rax,8), %rax
 128      C8
 129              	.LVL12:
 130 012e 660F28E9 		movapd	%xmm1, %xmm5
 131 0132 F20F5928 		mulsd	(%rax), %xmm5
 132 0136 660F28E0 		movapd	%xmm0, %xmm4
 133 013a F20F5960 		mulsd	16(%rax), %xmm4
 133      10
 134 013f F20F58E5 		addsd	%xmm5, %xmm4
 135 0143 F20F58DC 		addsd	%xmm4, %xmm3
 136              	.LVL13:
  46:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 137              		.loc 1 47 0
 138 0147 F20F5948 		mulsd	8(%rax), %xmm1
 138      08
 139 014c F20F5940 		mulsd	24(%rax), %xmm0
 139      18
 140 0151 F20F58C1 		addsd	%xmm1, %xmm0
 141 0155 F20F58D0 		addsd	%xmm0, %xmm2
 142              	.LVL14:
  43:matmultbintrinsics.c **** 		{
 143              		.loc 1 43 0
 144 0159 83C101   		addl	$1, %ecx
 145              	.LVL15:
 146 015c 4439D1   		cmpl	%r10d, %ecx
 147 015f 75B7     		jne	.L6
 148              	.LVL16:
 149              	.L5:
  47:matmultbintrinsics.c **** 		}
  48:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 150              		.loc 1 49 0
 151 0161 F20F111A 		movsd	%xmm3, (%rdx)
 152 0165 F20F1152 		movsd	%xmm2, 8(%rdx)
GAS LISTING /tmp/cc55sAij.s 			page 5


 152      08
 153              	.LVL17:
  49:matmultbintrinsics.c **** 	}
  50:matmultbintrinsics.c **** 
  51:matmultbintrinsics.c **** 	for(/*k = 1*/; k < lda3; k++)
 154              		.loc 1 52 0
 155 016a C744248C 		movl	$1, -116(%rsp)
 155      01000000 
 156 0172 83BC2488 		cmpl	$1, 136(%rsp)
 156      00000001 
 157 017a 0F8E1901 		jle	.L8
 157      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 158              		.loc 1 19 0
 159 0180 8B8C24A0 		movl	160(%rsp), %ecx
 159      000000
 160 0187 894C24A0 		movl	%ecx, -96(%rsp)
 161 018b 89C8     		movl	%ecx, %eax
 162 018d 0FAFC1   		imull	%ecx, %eax
 163 0190 89442498 		movl	%eax, -104(%rsp)
 164 0194 4189C6   		movl	%eax, %r14d
 165 0197 4189CD   		movl	%ecx, %r13d
 166 019a 41BC0100 		movl	$1, %r12d
 166      0000
  52:matmultbintrinsics.c **** 	{
  53:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
  54:matmultbintrinsics.c **** 		for(l=mnos-1;l<nos;l++)
 167              		.loc 1 55 0
 168 01a0 8B8C24B0 		movl	176(%rsp), %ecx
 168      000000
 169 01a7 83E901   		subl	$1, %ecx
 170 01aa 894C248C 		movl	%ecx, -116(%rsp)
  55:matmultbintrinsics.c **** 		{
  56:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
  57:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
  58:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 171              		.loc 1 59 0
 172 01ae 660F57C0 		xorpd	%xmm0, %xmm0
 173 01b2 F20F1144 		movsd	%xmm0, -72(%rsp)
 173      24B8
  55:matmultbintrinsics.c **** 		{
 174              		.loc 1 55 0
 175 01b8 F20F1144 		movsd	%xmm0, -88(%rsp)
 175      24A8
 176              	.LVL18:
 177              	.L12:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 178              		.loc 1 19 0
 179 01be 4589EF   		movl	%r13d, %r15d
 180              	.LVL19:
  55:matmultbintrinsics.c **** 		{
 181              		.loc 1 55 0
 182 01c1 8B44248C 		movl	-116(%rsp), %eax
 183              	.LVL20:
 184 01c5 660F57D2 		xorpd	%xmm2, %xmm2
 185 01c9 F20F105C 		movsd	-88(%rsp), %xmm3
 185      24A8
GAS LISTING /tmp/cc55sAij.s 			page 6


 186 01cf 4139C2   		cmpl	%eax, %r10d
 187 01d2 0F8E8A00 		jle	.L10
 187      0000
  57:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 188              		.loc 1 57 0
 189 01d8 4963DD   		movslq	%r13d, %rbx
 190 01db 4C8D1CDD 		leaq	0(,%rbx,8), %r11
 190      00000000 
 191 01e3 4C8D0CDD 		leaq	8(,%rbx,8), %r9
 191      08000000 
  58:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 192              		.loc 1 58 0
 193 01eb 4963CE   		movslq	%r14d, %rcx
 194 01ee 4C8D04CD 		leaq	0(,%rcx,8), %r8
 194      00000000 
 195 01f6 488D2CCD 		leaq	16(,%rcx,8), %rbp
 195      10000000 
 196              		.loc 1 59 0
 197 01fe 488D3CCD 		leaq	8(,%rcx,8), %rdi
 197      08000000 
 198 0206 488D34CD 		leaq	24(,%rcx,8), %rsi
 198      18000000 
 199 020e F20F105C 		movsd	-72(%rsp), %xmm3
 199      24B8
 200              	.LVL21:
 201              	.L11:
  57:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 202              		.loc 1 57 0
 203 0214 4863C8   		movslq	%eax, %rcx
 204 0217 488B5CCC 		movq	8(%rsp,%rcx,8), %rbx
 204      08
 205 021c F2420F10 		movsd	(%rbx,%r11), %xmm1
 205      0C1B
 206              	.LVL22:
 207 0222 F2420F10 		movsd	(%rbx,%r9), %xmm0
 207      040B
 208              	.LVL23:
  58:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 209              		.loc 1 58 0
 210 0228 488B4CCC 		movq	-56(%rsp,%rcx,8), %rcx
 210      C8
 211              	.LVL24:
 212 022d 660F28E9 		movapd	%xmm1, %xmm5
 213 0231 F2420F59 		mulsd	(%rcx,%r8), %xmm5
 213      2C01
 214 0237 660F28E0 		movapd	%xmm0, %xmm4
 215 023b F20F5924 		mulsd	(%rcx,%rbp), %xmm4
 215      29
 216 0240 F20F58E5 		addsd	%xmm5, %xmm4
 217 0244 F20F58DC 		addsd	%xmm4, %xmm3
 218              	.LVL25:
 219              		.loc 1 59 0
 220 0248 F20F590C 		mulsd	(%rcx,%rdi), %xmm1
 220      39
 221 024d F20F5904 		mulsd	(%rcx,%rsi), %xmm0
 221      31
 222 0252 F20F58C1 		addsd	%xmm1, %xmm0
GAS LISTING /tmp/cc55sAij.s 			page 7


 223 0256 F20F58D0 		addsd	%xmm0, %xmm2
 224              	.LVL26:
  55:matmultbintrinsics.c **** 		for(l=mnos-1;l<nos;l++)
 225              		.loc 1 55 0
 226 025a 83C001   		addl	$1, %eax
 227              	.LVL27:
 228 025d 4439D0   		cmpl	%r10d, %eax
 229 0260 75B2     		jne	.L11
 230              	.LVL28:
 231              	.L10:
  59:matmultbintrinsics.c **** 		}
  60:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 232              		.loc 1 61 0
 233 0262 4D63FF   		movslq	%r15d, %r15
 234 0265 F2420F11 		movsd	%xmm3, (%rdx,%r15,8)
 234      1CFA
 235 026b F2420F11 		movsd	%xmm2, 8(%rdx,%r15,8)
 235      54FA08
  52:matmultbintrinsics.c **** 	for(/*k = 1*/; k < lda3; k++)
 236              		.loc 1 52 0
 237 0272 4183C401 		addl	$1, %r12d
 238              	.LVL29:
 239 0276 44036C24 		addl	-96(%rsp), %r13d
 239      A0
 240              	.LVL30:
 241 027b 44037424 		addl	-104(%rsp), %r14d
 241      98
 242              	.LVL31:
 243 0280 443BA424 		cmpl	136(%rsp), %r12d
 243      88000000 
 244 0288 0F8530FF 		jne	.L12
 244      FFFF
 245 028e 8B842488 		movl	136(%rsp), %eax
 245      000000
 246              	.LVL32:
 247 0295 8944248C 		movl	%eax, -116(%rsp)
 248              	.LVL33:
 249              	.L8:
  61:matmultbintrinsics.c **** 	}
  62:matmultbintrinsics.c **** 
  63:matmultbintrinsics.c **** 	for(/*k = lda3*/; k < lda2; k++)
 250              		.loc 1 64 0
 251 0299 8B4C248C 		movl	-116(%rsp), %ecx
 252 029d 394C2490 		cmpl	%ecx, -112(%rsp)
 253 02a1 0F8E1601 		jle	.L13
 253      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 254              		.loc 1 19 0
 255 02a7 8B8424A0 		movl	160(%rsp), %eax
 255      000000
 256 02ae 894424A0 		movl	%eax, -96(%rsp)
 257 02b2 4189CE   		movl	%ecx, %r14d
 258 02b5 440FAFF0 		imull	%eax, %r14d
 259 02b9 0FAFC0   		imull	%eax, %eax
 260 02bc 89442498 		movl	%eax, -104(%rsp)
 261 02c0 4189CD   		movl	%ecx, %r13d
 262 02c3 440FAFE8 		imull	%eax, %r13d
GAS LISTING /tmp/cc55sAij.s 			page 8


 263 02c7 4189CC   		movl	%ecx, %r12d
  64:matmultbintrinsics.c **** 	{
  65:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
  66:matmultbintrinsics.c **** 		for(l=mnos-2;l<nos;l++)
 264              		.loc 1 67 0
 265 02ca 8B8C24B0 		movl	176(%rsp), %ecx
 265      000000
 266 02d1 83E902   		subl	$2, %ecx
 267 02d4 894C248C 		movl	%ecx, -116(%rsp)
  67:matmultbintrinsics.c **** 		{
  68:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
  69:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
  70:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 268              		.loc 1 71 0
 269 02d8 660F57C0 		xorpd	%xmm0, %xmm0
 270 02dc F20F1144 		movsd	%xmm0, -72(%rsp)
 270      24B8
  67:matmultbintrinsics.c **** 		{
 271              		.loc 1 67 0
 272 02e2 F20F1144 		movsd	%xmm0, -88(%rsp)
 272      24A8
 273              	.LVL34:
 274              	.L17:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 275              		.loc 1 19 0
 276 02e8 4589F7   		movl	%r14d, %r15d
 277              	.LVL35:
  67:matmultbintrinsics.c **** 		{
 278              		.loc 1 67 0
 279 02eb 8B44248C 		movl	-116(%rsp), %eax
 280              	.LVL36:
 281 02ef 660F57D2 		xorpd	%xmm2, %xmm2
 282 02f3 F20F105C 		movsd	-88(%rsp), %xmm3
 282      24A8
 283 02f9 4139C2   		cmpl	%eax, %r10d
 284 02fc 0F8E8A00 		jle	.L15
 284      0000
  69:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 285              		.loc 1 69 0
 286 0302 4963DE   		movslq	%r14d, %rbx
 287 0305 4C8D1CDD 		leaq	0(,%rbx,8), %r11
 287      00000000 
 288 030d 4C8D0CDD 		leaq	8(,%rbx,8), %r9
 288      08000000 
  70:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 289              		.loc 1 70 0
 290 0315 4963CD   		movslq	%r13d, %rcx
 291 0318 4C8D04CD 		leaq	0(,%rcx,8), %r8
 291      00000000 
 292 0320 488D2CCD 		leaq	16(,%rcx,8), %rbp
 292      10000000 
 293              		.loc 1 71 0
 294 0328 488D3CCD 		leaq	8(,%rcx,8), %rdi
 294      08000000 
 295 0330 488D34CD 		leaq	24(,%rcx,8), %rsi
 295      18000000 
 296 0338 F20F105C 		movsd	-72(%rsp), %xmm3
GAS LISTING /tmp/cc55sAij.s 			page 9


 296      24B8
 297              	.LVL37:
 298              	.L16:
  69:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 299              		.loc 1 69 0
 300 033e 4863C8   		movslq	%eax, %rcx
 301 0341 488B5CCC 		movq	8(%rsp,%rcx,8), %rbx
 301      08
 302 0346 F2420F10 		movsd	(%rbx,%r11), %xmm1
 302      0C1B
 303              	.LVL38:
 304 034c F2420F10 		movsd	(%rbx,%r9), %xmm0
 304      040B
 305              	.LVL39:
  70:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 306              		.loc 1 70 0
 307 0352 488B4CCC 		movq	-56(%rsp,%rcx,8), %rcx
 307      C8
 308              	.LVL40:
 309 0357 660F28E9 		movapd	%xmm1, %xmm5
 310 035b F2420F59 		mulsd	(%rcx,%r8), %xmm5
 310      2C01
 311 0361 660F28E0 		movapd	%xmm0, %xmm4
 312 0365 F20F5924 		mulsd	(%rcx,%rbp), %xmm4
 312      29
 313 036a F20F58E5 		addsd	%xmm5, %xmm4
 314 036e F20F58DC 		addsd	%xmm4, %xmm3
 315              	.LVL41:
 316              		.loc 1 71 0
 317 0372 F20F590C 		mulsd	(%rcx,%rdi), %xmm1
 317      39
 318 0377 F20F5904 		mulsd	(%rcx,%rsi), %xmm0
 318      31
 319 037c F20F58C1 		addsd	%xmm1, %xmm0
 320 0380 F20F58D0 		addsd	%xmm0, %xmm2
 321              	.LVL42:
  67:matmultbintrinsics.c **** 		for(l=mnos-2;l<nos;l++)
 322              		.loc 1 67 0
 323 0384 83C001   		addl	$1, %eax
 324              	.LVL43:
 325 0387 4439D0   		cmpl	%r10d, %eax
 326 038a 75B2     		jne	.L16
 327              	.LVL44:
 328              	.L15:
  71:matmultbintrinsics.c **** 		}
  72:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 329              		.loc 1 73 0
 330 038c 4D63FF   		movslq	%r15d, %r15
 331 038f F2420F11 		movsd	%xmm3, (%rdx,%r15,8)
 331      1CFA
 332 0395 F2420F11 		movsd	%xmm2, 8(%rdx,%r15,8)
 332      54FA08
  64:matmultbintrinsics.c **** 	for(/*k = lda3*/; k < lda2; k++)
 333              		.loc 1 64 0
 334 039c 4183C401 		addl	$1, %r12d
 335              	.LVL45:
 336 03a0 44037424 		addl	-96(%rsp), %r14d
GAS LISTING /tmp/cc55sAij.s 			page 10


 336      A0
 337              	.LVL46:
 338 03a5 44036C24 		addl	-104(%rsp), %r13d
 338      98
 339              	.LVL47:
 340 03aa 44396424 		cmpl	%r12d, -112(%rsp)
 340      90
 341 03af 0F8F33FF 		jg	.L17
 341      FFFF
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 342              		.loc 1 19 0
 343 03b5 8B442490 		movl	-112(%rsp), %eax
 344              	.LVL48:
 345 03b9 8944248C 		movl	%eax, -116(%rsp)
 346              	.LVL49:
 347              	.L13:
  73:matmultbintrinsics.c **** 	}
  74:matmultbintrinsics.c **** 
  75:matmultbintrinsics.c **** 	for(/*k = lda2*/; k < (lda1- lda2); k++)
 348              		.loc 1 76 0
 349 03bd 8B4C24C4 		movl	-60(%rsp), %ecx
 350 03c1 2B4C2490 		subl	-112(%rsp), %ecx
 351 03c5 894C2490 		movl	%ecx, -112(%rsp)
 352 03c9 394C248C 		cmpl	%ecx, -116(%rsp)
 353 03cd 0F8D2B01 		jge	.L18
 353      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 354              		.loc 1 19 0
 355 03d3 8B8424A0 		movl	160(%rsp), %eax
 355      000000
 356 03da 894424A8 		movl	%eax, -88(%rsp)
 357 03de 448B7424 		movl	-116(%rsp), %r14d
 357      8C
 358 03e3 440FAFF0 		imull	%eax, %r14d
 359 03e7 0FAFC0   		imull	%eax, %eax
 360 03ea 89442498 		movl	%eax, -104(%rsp)
 361 03ee 4189C3   		movl	%eax, %r11d
 362 03f1 440FAF5C 		imull	-116(%rsp), %r11d
 362      248C
 363 03f7 418D42FF 		leal	-1(%r10), %eax
 364 03fb 4C8D2CC5 		leaq	8(,%rax,8), %r13
 364      08000000 
 365 0403 660F57C0 		xorpd	%xmm0, %xmm0
 366 0407 F20F1144 		movsd	%xmm0, -72(%rsp)
 366      24B8
  76:matmultbintrinsics.c **** 	{
  77:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
  78:matmultbintrinsics.c **** 		for(l=0;l<nos;l++)
  79:matmultbintrinsics.c **** 		{
  80:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 367              		.loc 1 81 0
 368 040d 4C8D6424 		leaq	8(%rsp), %r12
 368      08
  81:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 369              		.loc 1 82 0
 370 0412 488D6C24 		leaq	-56(%rsp), %rbp
 370      C8
GAS LISTING /tmp/cc55sAij.s 			page 11


 371 0417 44895424 		movl	%r10d, -96(%rsp)
 371      A0
 372              	.L22:
 373              	.LVL50:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 374              		.loc 1 19 0
 375 041c 4589F7   		movl	%r14d, %r15d
 376              	.LVL51:
 377 041f 4489D8   		movl	%r11d, %eax
 378              	.LVL52:
  79:matmultbintrinsics.c **** 		for(l=0;l<nos;l++)
 379              		.loc 1 79 0
 380 0422 660F57D2 		xorpd	%xmm2, %xmm2
 381 0426 660F28DA 		movapd	%xmm2, %xmm3
 382 042a 837C24A0 		cmpl	$0, -96(%rsp)
 382      00
 383 042f 0F8E8F00 		jle	.L20
 383      0000
  81:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 384              		.loc 1 81 0
 385 0435 4963CE   		movslq	%r14d, %rcx
 386 0438 4C8D14CD 		leaq	0(,%rcx,8), %r10
 386      00000000 
 387 0440 4C8D0CCD 		leaq	8(,%rcx,8), %r9
 387      08000000 
 388              		.loc 1 82 0
 389 0448 4898     		cltq
 390 044a 4C8D04C5 		leaq	0(,%rax,8), %r8
 390      00000000 
 391 0452 488D3CC5 		leaq	16(,%rax,8), %rdi
 391      10000000 
  82:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 392              		.loc 1 83 0
 393 045a 488D34C5 		leaq	8(,%rax,8), %rsi
 393      08000000 
 394 0462 488D1CC5 		leaq	24(,%rax,8), %rbx
 394      18000000 
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 395              		.loc 1 19 0
 396 046a B8000000 		movl	$0, %eax
 396      00
 397 046f 660F57D2 		xorpd	%xmm2, %xmm2
 398 0473 F20F105C 		movsd	-72(%rsp), %xmm3
 398      24B8
 399              	.LVL53:
 400              	.L21:
  81:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 401              		.loc 1 81 0
 402 0479 498B0C04 		movq	(%r12,%rax), %rcx
 403 047d F2420F10 		movsd	(%rcx,%r10), %xmm1
 403      0C11
 404              	.LVL54:
 405 0483 F2420F10 		movsd	(%rcx,%r9), %xmm0
 405      0409
 406              	.LVL55:
  82:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 407              		.loc 1 82 0
GAS LISTING /tmp/cc55sAij.s 			page 12


 408 0489 488B4C05 		movq	0(%rbp,%rax), %rcx
 408      00
 409 048e 660F28E9 		movapd	%xmm1, %xmm5
 410 0492 F2420F59 		mulsd	(%rcx,%r8), %xmm5
 410      2C01
 411 0498 660F28E0 		movapd	%xmm0, %xmm4
 412 049c F20F5924 		mulsd	(%rcx,%rdi), %xmm4
 412      39
 413 04a1 F20F58E5 		addsd	%xmm5, %xmm4
 414 04a5 F20F58DC 		addsd	%xmm4, %xmm3
 415              	.LVL56:
 416              		.loc 1 83 0
 417 04a9 F20F590C 		mulsd	(%rcx,%rsi), %xmm1
 417      31
 418 04ae F20F5904 		mulsd	(%rcx,%rbx), %xmm0
 418      19
 419 04b3 F20F58C1 		addsd	%xmm1, %xmm0
 420 04b7 F20F58D0 		addsd	%xmm0, %xmm2
 421              	.LVL57:
 422 04bb 4883C008 		addq	$8, %rax
 423              	.LVL58:
  79:matmultbintrinsics.c **** 		for(l=0;l<nos;l++)
 424              		.loc 1 79 0
 425 04bf 4C39E8   		cmpq	%r13, %rax
 426 04c2 75B5     		jne	.L21
 427              	.LVL59:
 428              	.L20:
  83:matmultbintrinsics.c **** 		}
  84:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 429              		.loc 1 85 0
 430 04c4 4D63FF   		movslq	%r15d, %r15
 431 04c7 F2420F11 		movsd	%xmm3, (%rdx,%r15,8)
 431      1CFA
 432 04cd F2420F11 		movsd	%xmm2, 8(%rdx,%r15,8)
 432      54FA08
  76:matmultbintrinsics.c **** 	for(/*k = lda2*/; k < (lda1- lda2); k++)
 433              		.loc 1 76 0
 434 04d4 8344248C 		addl	$1, -116(%rsp)
 434      01
 435 04d9 44037424 		addl	-88(%rsp), %r14d
 435      A8
 436              	.LVL60:
 437 04de 44035C24 		addl	-104(%rsp), %r11d
 437      98
 438              	.LVL61:
 439 04e3 8B44248C 		movl	-116(%rsp), %eax
 440 04e7 39442490 		cmpl	%eax, -112(%rsp)
 441 04eb 0F8F2BFF 		jg	.L22
 441      FFFF
 442 04f1 448B5424 		movl	-96(%rsp), %r10d
 442      A0
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 443              		.loc 1 19 0
 444 04f6 8B4C2490 		movl	-112(%rsp), %ecx
 445 04fa 894C248C 		movl	%ecx, -116(%rsp)
 446              	.LVL62:
 447              	.L18:
GAS LISTING /tmp/cc55sAij.s 			page 13


  85:matmultbintrinsics.c **** 	}
  86:matmultbintrinsics.c **** 
  87:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda2)*/; k < (lda1 - lda3); k++)
 448              		.loc 1 88 0
 449 04fe 8B4424C4 		movl	-60(%rsp), %eax
 450 0502 2B842488 		subl	136(%rsp), %eax
 450      000000
 451 0509 89442490 		movl	%eax, -112(%rsp)
 452 050d 8B4C248C 		movl	-116(%rsp), %ecx
 453 0511 39C8     		cmpl	%ecx, %eax
 454 0513 0F8E2C01 		jle	.L23
 454      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 455              		.loc 1 19 0
 456 0519 8B8424A0 		movl	160(%rsp), %eax
 456      000000
 457 0520 894424A0 		movl	%eax, -96(%rsp)
 458 0524 4189CE   		movl	%ecx, %r14d
 459 0527 440FAFF0 		imull	%eax, %r14d
 460 052b 0FAFC0   		imull	%eax, %eax
 461 052e 894424B4 		movl	%eax, -76(%rsp)
 462 0532 89C1     		movl	%eax, %ecx
 463 0534 0FAF4C24 		imull	-116(%rsp), %ecx
 463      8C
 464 0539 418D42FE 		leal	-2(%r10), %eax
 465 053d 4C8D2CC5 		leaq	8(,%rax,8), %r13
 465      08000000 
 466 0545 660F57C0 		xorpd	%xmm0, %xmm0
 467 0549 F20F1144 		movsd	%xmm0, -88(%rsp)
 467      24A8
  88:matmultbintrinsics.c **** 	{
  89:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
  90:matmultbintrinsics.c **** 		for(l=0;l<nos-1;l++)
  91:matmultbintrinsics.c **** 		{
  92:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 468              		.loc 1 93 0
 469 054f 4C8D6424 		leaq	8(%rsp), %r12
 469      08
  93:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 470              		.loc 1 94 0
 471 0554 4C8D5C24 		leaq	-56(%rsp), %r11
 471      C8
 472 0559 44895424 		movl	%r10d, -104(%rsp)
 472      98
 473 055e 4189CA   		movl	%ecx, %r10d
 474              	.L27:
 475              	.LVL63:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 476              		.loc 1 19 0
 477 0561 4589F7   		movl	%r14d, %r15d
 478              	.LVL64:
 479 0564 4489D0   		movl	%r10d, %eax
 480              	.LVL65:
  91:matmultbintrinsics.c **** 		for(l=0;l<nos-1;l++)
 481              		.loc 1 91 0
 482 0567 8B4C2498 		movl	-104(%rsp), %ecx
 483 056b 83E901   		subl	$1, %ecx
GAS LISTING /tmp/cc55sAij.s 			page 14


 484 056e 660F57D2 		xorpd	%xmm2, %xmm2
 485 0572 660F28DA 		movapd	%xmm2, %xmm3
 486 0576 85C9     		testl	%ecx, %ecx
 487 0578 0F8E8D00 		jle	.L25
 487      0000
  93:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 488              		.loc 1 93 0
 489 057e 4963CE   		movslq	%r14d, %rcx
 490 0581 4C8D0CCD 		leaq	0(,%rcx,8), %r9
 490      00000000 
 491 0589 4C8D04CD 		leaq	8(,%rcx,8), %r8
 491      08000000 
 492              		.loc 1 94 0
 493 0591 4898     		cltq
 494 0593 488D2CC5 		leaq	0(,%rax,8), %rbp
 494      00000000 
 495 059b 488D3CC5 		leaq	16(,%rax,8), %rdi
 495      10000000 
  94:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 496              		.loc 1 95 0
 497 05a3 488D34C5 		leaq	8(,%rax,8), %rsi
 497      08000000 
 498 05ab 488D1CC5 		leaq	24(,%rax,8), %rbx
 498      18000000 
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 499              		.loc 1 19 0
 500 05b3 B8000000 		movl	$0, %eax
 500      00
 501 05b8 660F57D2 		xorpd	%xmm2, %xmm2
 502 05bc F20F105C 		movsd	-88(%rsp), %xmm3
 502      24A8
 503              	.LVL66:
 504              	.L26:
  93:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 505              		.loc 1 93 0
 506 05c2 498B0C04 		movq	(%r12,%rax), %rcx
 507 05c6 F2420F10 		movsd	(%rcx,%r9), %xmm1
 507      0C09
 508              	.LVL67:
 509 05cc F2420F10 		movsd	(%rcx,%r8), %xmm0
 509      0401
 510              	.LVL68:
  94:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 511              		.loc 1 94 0
 512 05d2 498B0C03 		movq	(%r11,%rax), %rcx
 513 05d6 660F28E9 		movapd	%xmm1, %xmm5
 514 05da F20F592C 		mulsd	(%rcx,%rbp), %xmm5
 514      29
 515 05df 660F28E0 		movapd	%xmm0, %xmm4
 516 05e3 F20F5924 		mulsd	(%rcx,%rdi), %xmm4
 516      39
 517 05e8 F20F58E5 		addsd	%xmm5, %xmm4
 518 05ec F20F58DC 		addsd	%xmm4, %xmm3
 519              	.LVL69:
 520              		.loc 1 95 0
 521 05f0 F20F590C 		mulsd	(%rcx,%rsi), %xmm1
 521      31
GAS LISTING /tmp/cc55sAij.s 			page 15


 522 05f5 F20F5904 		mulsd	(%rcx,%rbx), %xmm0
 522      19
 523 05fa F20F58C1 		addsd	%xmm1, %xmm0
 524 05fe F20F58D0 		addsd	%xmm0, %xmm2
 525              	.LVL70:
 526 0602 4883C008 		addq	$8, %rax
 527              	.LVL71:
  91:matmultbintrinsics.c **** 		for(l=0;l<nos-1;l++)
 528              		.loc 1 91 0
 529 0606 4C39E8   		cmpq	%r13, %rax
 530 0609 75B7     		jne	.L26
 531              	.LVL72:
 532              	.L25:
  95:matmultbintrinsics.c **** 		}
  96:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 533              		.loc 1 97 0
 534 060b 4D63FF   		movslq	%r15d, %r15
 535 060e F2420F11 		movsd	%xmm3, (%rdx,%r15,8)
 535      1CFA
 536 0614 F2420F11 		movsd	%xmm2, 8(%rdx,%r15,8)
 536      54FA08
  88:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda2)*/; k < (lda1 - lda3); k++)
 537              		.loc 1 88 0
 538 061b 8344248C 		addl	$1, -116(%rsp)
 538      01
 539 0620 44037424 		addl	-96(%rsp), %r14d
 539      A0
 540              	.LVL73:
 541 0625 44035424 		addl	-76(%rsp), %r10d
 541      B4
 542              	.LVL74:
 543 062a 8B44248C 		movl	-116(%rsp), %eax
 544 062e 39442490 		cmpl	%eax, -112(%rsp)
 545 0632 0F8F29FF 		jg	.L27
 545      FFFF
 546 0638 448B5424 		movl	-104(%rsp), %r10d
 546      98
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 547              		.loc 1 19 0
 548 063d 8B4C2490 		movl	-112(%rsp), %ecx
 549 0641 894C248C 		movl	%ecx, -116(%rsp)
 550              	.LVL75:
 551              	.L23:
  97:matmultbintrinsics.c **** 	}
  98:matmultbintrinsics.c **** 
  99:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda3)*/; k < (lda1 - 1); k++)
 552              		.loc 1 100 0
 553 0645 8B4424C4 		movl	-60(%rsp), %eax
 554 0649 83E801   		subl	$1, %eax
 555 064c 894424B4 		movl	%eax, -76(%rsp)
 556 0650 8B4C248C 		movl	-116(%rsp), %ecx
 557 0654 39C8     		cmpl	%ecx, %eax
 558 0656 0F8E4101 		jle	.L28
 558      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 559              		.loc 1 19 0
 560 065c 8B8424A0 		movl	160(%rsp), %eax
GAS LISTING /tmp/cc55sAij.s 			page 16


 560      000000
 561 0663 894424A0 		movl	%eax, -96(%rsp)
 562 0667 4189CE   		movl	%ecx, %r14d
 563 066a 440FAFF0 		imull	%eax, %r14d
 564 066e 0FAFC0   		imull	%eax, %eax
 565 0671 89442498 		movl	%eax, -104(%rsp)
 566 0675 89C1     		movl	%eax, %ecx
 567 0677 0FAF4C24 		imull	-116(%rsp), %ecx
 567      8C
 568 067c 8B44248C 		movl	-116(%rsp), %eax
 569 0680 89442490 		movl	%eax, -112(%rsp)
 570 0684 418D42FD 		leal	-3(%r10), %eax
 571 0688 4C8D2CC5 		leaq	8(,%rax,8), %r13
 571      08000000 
 572 0690 660F57C0 		xorpd	%xmm0, %xmm0
 573 0694 F20F1144 		movsd	%xmm0, -72(%rsp)
 573      24B8
 100:matmultbintrinsics.c **** 	{
 101:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
 102:matmultbintrinsics.c **** 		for(l=0;l<nos-2;l++)
 103:matmultbintrinsics.c **** 		{
 104:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 574              		.loc 1 105 0
 575 069a 4C8D6424 		leaq	8(%rsp), %r12
 575      08
 105:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 576              		.loc 1 106 0
 577 069f 4C8D5C24 		leaq	-56(%rsp), %r11
 577      C8
 578 06a4 44895424 		movl	%r10d, -88(%rsp)
 578      A8
 579 06a9 4189CA   		movl	%ecx, %r10d
 580              	.LVL76:
 581              	.L32:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 582              		.loc 1 19 0
 583 06ac 4589F7   		movl	%r14d, %r15d
 584              	.LVL77:
 585 06af 4489D0   		movl	%r10d, %eax
 586              	.LVL78:
 103:matmultbintrinsics.c **** 		for(l=0;l<nos-2;l++)
 587              		.loc 1 103 0
 588 06b2 8B4C24A8 		movl	-88(%rsp), %ecx
 589 06b6 83E902   		subl	$2, %ecx
 590 06b9 660F57D2 		xorpd	%xmm2, %xmm2
 591 06bd 660F28DA 		movapd	%xmm2, %xmm3
 592 06c1 85C9     		testl	%ecx, %ecx
 593 06c3 0F8E8D00 		jle	.L30
 593      0000
 105:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 594              		.loc 1 105 0
 595 06c9 4963CE   		movslq	%r14d, %rcx
 596 06cc 4C8D0CCD 		leaq	0(,%rcx,8), %r9
 596      00000000 
 597 06d4 4C8D04CD 		leaq	8(,%rcx,8), %r8
 597      08000000 
 598              		.loc 1 106 0
GAS LISTING /tmp/cc55sAij.s 			page 17


 599 06dc 4898     		cltq
 600 06de 488D2CC5 		leaq	0(,%rax,8), %rbp
 600      00000000 
 601 06e6 488D3CC5 		leaq	16(,%rax,8), %rdi
 601      10000000 
 106:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 602              		.loc 1 107 0
 603 06ee 488D34C5 		leaq	8(,%rax,8), %rsi
 603      08000000 
 604 06f6 488D1CC5 		leaq	24(,%rax,8), %rbx
 604      18000000 
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 605              		.loc 1 19 0
 606 06fe B8000000 		movl	$0, %eax
 606      00
 607 0703 660F57D2 		xorpd	%xmm2, %xmm2
 608 0707 F20F105C 		movsd	-72(%rsp), %xmm3
 608      24B8
 609              	.LVL79:
 610              	.L31:
 105:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 611              		.loc 1 105 0
 612 070d 498B0C04 		movq	(%r12,%rax), %rcx
 613 0711 F2420F10 		movsd	(%rcx,%r9), %xmm1
 613      0C09
 614              	.LVL80:
 615 0717 F2420F10 		movsd	(%rcx,%r8), %xmm0
 615      0401
 616              	.LVL81:
 106:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 617              		.loc 1 106 0
 618 071d 498B0C03 		movq	(%r11,%rax), %rcx
 619 0721 660F28E9 		movapd	%xmm1, %xmm5
 620 0725 F20F592C 		mulsd	(%rcx,%rbp), %xmm5
 620      29
 621 072a 660F28E0 		movapd	%xmm0, %xmm4
 622 072e F20F5924 		mulsd	(%rcx,%rdi), %xmm4
 622      39
 623 0733 F20F58E5 		addsd	%xmm5, %xmm4
 624 0737 F20F58DC 		addsd	%xmm4, %xmm3
 625              	.LVL82:
 626              		.loc 1 107 0
 627 073b F20F590C 		mulsd	(%rcx,%rsi), %xmm1
 627      31
 628 0740 F20F5904 		mulsd	(%rcx,%rbx), %xmm0
 628      19
 629 0745 F20F58C1 		addsd	%xmm1, %xmm0
 630 0749 F20F58D0 		addsd	%xmm0, %xmm2
 631              	.LVL83:
 632 074d 4883C008 		addq	$8, %rax
 633              	.LVL84:
 103:matmultbintrinsics.c **** 		for(l=0;l<nos-2;l++)
 634              		.loc 1 103 0
 635 0751 4C39E8   		cmpq	%r13, %rax
 636 0754 75B7     		jne	.L31
 637              	.LVL85:
 638              	.L30:
GAS LISTING /tmp/cc55sAij.s 			page 18


 107:matmultbintrinsics.c **** 		}
 108:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 639              		.loc 1 109 0
 640 0756 4D63FF   		movslq	%r15d, %r15
 641 0759 F2420F11 		movsd	%xmm3, (%rdx,%r15,8)
 641      1CFA
 642 075f F2420F11 		movsd	%xmm2, 8(%rdx,%r15,8)
 642      54FA08
 100:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda3)*/; k < (lda1 - 1); k++)
 643              		.loc 1 100 0
 644 0766 83442490 		addl	$1, -112(%rsp)
 644      01
 645 076b 44037424 		addl	-96(%rsp), %r14d
 645      A0
 646              	.LVL86:
 647 0770 44035424 		addl	-104(%rsp), %r10d
 647      98
 648              	.LVL87:
 649 0775 8B442490 		movl	-112(%rsp), %eax
 650 0779 394424B4 		cmpl	%eax, -76(%rsp)
 651 077d 0F8F29FF 		jg	.L32
 651      FFFF
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 652              		.loc 1 19 0
 653 0783 8B44248C 		movl	-116(%rsp), %eax
 654 0787 F7D0     		notl	%eax
 655 0789 8B4C24C4 		movl	-60(%rsp), %ecx
 656 078d 8D4401FF 		leal	-1(%rcx,%rax), %eax
 657 0791 8B4C248C 		movl	-116(%rsp), %ecx
 658 0795 8D4C0801 		leal	1(%rax,%rcx), %ecx
 659 0799 894C248C 		movl	%ecx, -116(%rsp)
 660              	.LVL88:
 661              	.L28:
 109:matmultbintrinsics.c **** 	}
 110:matmultbintrinsics.c **** 
 111:matmultbintrinsics.c **** 	for(/*k = (lda1 - 1)*/; k < (lda1); k++)
 662              		.loc 1 112 0
 663 079d 8B44248C 		movl	-116(%rsp), %eax
 664 07a1 394424C4 		cmpl	%eax, -60(%rsp)
 665 07a5 0F8E2101 		jle	.L33
 665      0000
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 666              		.loc 1 19 0
 667 07ab 8B8C24A0 		movl	160(%rsp), %ecx
 667      000000
 668 07b2 894C24C0 		movl	%ecx, -64(%rsp)
 669 07b6 4189C6   		movl	%eax, %r14d
 670 07b9 440FAFF1 		imull	%ecx, %r14d
 671 07bd 0FAFC9   		imull	%ecx, %ecx
 672 07c0 894C24B4 		movl	%ecx, -76(%rsp)
 673 07c4 4189CD   		movl	%ecx, %r13d
 674 07c7 440FAFE8 		imull	%eax, %r13d
 112:matmultbintrinsics.c **** 	{
 113:matmultbintrinsics.c **** 		sum1 = 0.0; sum0= 0.0;t1= k*dof; t2 = t1*dof;
 114:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 115:matmultbintrinsics.c **** 		{
 116:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
GAS LISTING /tmp/cc55sAij.s 			page 19


 117:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 118:matmultbintrinsics.c **** 			sum1 += ct[l][t2+1]*x0 + ct[l][t2+3]*x1;
 675              		.loc 1 119 0
 676 07cb 660F57C0 		xorpd	%xmm0, %xmm0
 677 07cf F20F1144 		movsd	%xmm0, -96(%rsp)
 677      24A0
 117:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 678              		.loc 1 117 0
 679 07d5 4C8D6424 		leaq	8(%rsp), %r12
 679      08
 118:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 680              		.loc 1 118 0
 681 07da 4C8D5C24 		leaq	-56(%rsp), %r11
 681      C8
 115:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 682              		.loc 1 115 0
 683 07df F20F1144 		movsd	%xmm0, -104(%rsp)
 683      2498
 684 07e5 48895424 		movq	%rdx, -112(%rsp)
 684      90
 685 07ea 8B9C24B0 		movl	176(%rsp), %ebx
 685      000000
 686              	.LVL89:
 687              	.L37:
  19:matmultbintrinsics.c **** PetscInt BSG_MatMult_2_ver1(PetscScalar ** coeff, PetscScalar * x, PetscScalar * y, PetscInt * idx,
 688              		.loc 1 19 0
 689 07f1 4589F7   		movl	%r14d, %r15d
 690              	.LVL90:
 691 07f4 4489E8   		movl	%r13d, %eax
 692              	.LVL91:
 115:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 693              		.loc 1 115 0
 694 07f7 660F57D2 		xorpd	%xmm2, %xmm2
 695 07fb F20F105C 		movsd	-104(%rsp), %xmm3
 695      2498
 696 0801 85DB     		testl	%ebx, %ebx
 697 0803 0F889100 		js	.L35
 697      0000
 117:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 698              		.loc 1 117 0
 699 0809 4963D6   		movslq	%r14d, %rdx
 700 080c 4C8D14D5 		leaq	0(,%rdx,8), %r10
 700      00000000 
 701 0814 4C8D0CD5 		leaq	8(,%rdx,8), %r9
 701      08000000 
 118:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 702              		.loc 1 118 0
 703 081c 4898     		cltq
 704 081e 4C8D04C5 		leaq	0(,%rax,8), %r8
 704      00000000 
 705 0826 488D2CC5 		leaq	16(,%rax,8), %rbp
 705      10000000 
 706              		.loc 1 119 0
 707 082e 488D3CC5 		leaq	8(,%rax,8), %rdi
 707      08000000 
 708 0836 488D34C5 		leaq	24(,%rax,8), %rsi
 708      18000000 
GAS LISTING /tmp/cc55sAij.s 			page 20


 709 083e BA000000 		movl	$0, %edx
 709      00
 710 0843 F20F105C 		movsd	-96(%rsp), %xmm3
 710      24A0
 711 0849 B9000000 		movl	$0, %ecx
 711      00
 712              	.LVL92:
 713              	.L36:
 117:matmultbintrinsics.c **** 			x0 = xt[l][t1]; x1 = xt[l][t1+1];
 714              		.loc 1 117 0
 715 084e 498B0414 		movq	(%r12,%rdx), %rax
 716 0852 F2420F10 		movsd	(%rax,%r10), %xmm1
 716      0C10
 717              	.LVL93:
 718 0858 F2420F10 		movsd	(%rax,%r9), %xmm0
 718      0408
 719              	.LVL94:
 118:matmultbintrinsics.c **** 			sum0 += ct[l][t2]*x0 + ct[l][t2+2]*x1;
 720              		.loc 1 118 0
 721 085e 498B0413 		movq	(%r11,%rdx), %rax
 722 0862 660F28E9 		movapd	%xmm1, %xmm5
 723 0866 F2420F59 		mulsd	(%rax,%r8), %xmm5
 723      2C00
 724 086c 660F28E0 		movapd	%xmm0, %xmm4
 725 0870 F20F5924 		mulsd	(%rax,%rbp), %xmm4
 725      28
 726 0875 F20F58E5 		addsd	%xmm5, %xmm4
 727 0879 F20F58DC 		addsd	%xmm4, %xmm3
 728              	.LVL95:
 729              		.loc 1 119 0
 730 087d F20F590C 		mulsd	(%rax,%rdi), %xmm1
 730      38
 731 0882 F20F5904 		mulsd	(%rax,%rsi), %xmm0
 731      30
 732 0887 F20F58C1 		addsd	%xmm1, %xmm0
 733 088b F20F58D0 		addsd	%xmm0, %xmm2
 734              	.LVL96:
 115:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 735              		.loc 1 115 0
 736 088f 83C101   		addl	$1, %ecx
 737              	.LVL97:
 738 0892 4883C208 		addq	$8, %rdx
 739              	.LVL98:
 740 0896 39CB     		cmpl	%ecx, %ebx
 741 0898 7DB4     		jge	.L36
 742              	.LVL99:
 743              	.L35:
 119:matmultbintrinsics.c **** 		}
 120:matmultbintrinsics.c **** 		y[k*dof] = sum0; y[k*dof+1] = sum1;
 744              		.loc 1 121 0
 745 089a 4D63FF   		movslq	%r15d, %r15
 746 089d 488B4424 		movq	-112(%rsp), %rax
 746      90
 747 08a2 F2420F11 		movsd	%xmm3, (%rax,%r15,8)
 747      1CF8
 748 08a8 F2420F11 		movsd	%xmm2, 8(%rax,%r15,8)
 748      54F808
GAS LISTING /tmp/cc55sAij.s 			page 21


 112:matmultbintrinsics.c **** 	for(/*k = (lda1 - 1)*/; k < (lda1); k++)
 749              		.loc 1 112 0
 750 08af 8344248C 		addl	$1, -116(%rsp)
 750      01
 751 08b4 44037424 		addl	-64(%rsp), %r14d
 751      C0
 752              	.LVL100:
 753 08b9 44036C24 		addl	-76(%rsp), %r13d
 753      B4
 754              	.LVL101:
 755 08be 8B4C248C 		movl	-116(%rsp), %ecx
 756 08c2 394C24C4 		cmpl	%ecx, -60(%rsp)
 757 08c6 0F8F25FF 		jg	.L37
 757      FFFF
 758              	.LVL102:
 759              	.L33:
 121:matmultbintrinsics.c **** 	}
 122:matmultbintrinsics.c **** 	PetscFunctionReturn(0);
 123:matmultbintrinsics.c **** }
 760              		.loc 1 124 0
 761 08cc B8000000 		movl	$0, %eax
 761      00
 762 08d1 4883C450 		addq	$80, %rsp
 763              		.cfi_def_cfa_offset 56
 764 08d5 5B       		popq	%rbx
 765              		.cfi_def_cfa_offset 48
 766 08d6 5D       		popq	%rbp
 767              		.cfi_def_cfa_offset 40
 768 08d7 415C     		popq	%r12
 769              		.cfi_def_cfa_offset 32
 770 08d9 415D     		popq	%r13
 771              		.cfi_def_cfa_offset 24
 772 08db 415E     		popq	%r14
 773              		.cfi_def_cfa_offset 16
 774 08dd 415F     		popq	%r15
 775              		.cfi_def_cfa_offset 8
 776 08df C3       		ret
 777              		.cfi_endproc
 778              	.LFE588:
 780              	.globl BSG_MatMult_2
 782              	BSG_MatMult_2:
 783              	.LFB589:
 124:matmultbintrinsics.c **** 
 125:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 126:matmultbintrinsics.c **** {
 784              		.loc 1 127 0
 785              		.cfi_startproc
 786              	.LVL103:
 787 08e0 4157     		pushq	%r15
 788              		.cfi_def_cfa_offset 16
 789              		.cfi_offset 15, -16
 790 08e2 4156     		pushq	%r14
 791              		.cfi_def_cfa_offset 24
 792              		.cfi_offset 14, -24
 793 08e4 4155     		pushq	%r13
 794              		.cfi_def_cfa_offset 32
 795              		.cfi_offset 13, -32
GAS LISTING /tmp/cc55sAij.s 			page 22


 796 08e6 4154     		pushq	%r12
 797              		.cfi_def_cfa_offset 40
 798              		.cfi_offset 12, -40
 799 08e8 55       		pushq	%rbp
 800              		.cfi_def_cfa_offset 48
 801              		.cfi_offset 6, -48
 802 08e9 53       		pushq	%rbx
 803              		.cfi_def_cfa_offset 56
 804              		.cfi_offset 3, -56
 805 08ea 448B5424 		movl	88(%rsp), %r10d
 805      58
 806 08ef 448B5C24 		movl	96(%rsp), %r11d
 806      60
 807              	.LVL104:
 127:matmultbintrinsics.c **** 	PetscInt i,j,k,l, t1, t2;
 128:matmultbintrinsics.c **** 	const PetscInt lda3 = m;
 129:matmultbintrinsics.c **** 	const PetscInt lda2 = lda3 * n;
 808              		.loc 1 130 0
 809 08f4 8B442438 		movl	56(%rsp), %eax
 810 08f8 0FAF4424 		imull	64(%rsp), %eax
 810      40
 811 08fd 894424A0 		movl	%eax, -96(%rsp)
 812              	.LVL105:
 130:matmultbintrinsics.c **** 	const PetscInt lda1 = lda2 * p;
 813              		.loc 1 131 0
 814 0901 0FAF4424 		imull	72(%rsp), %eax
 814      48
 815              	.LVL106:
 816 0906 894424B0 		movl	%eax, -80(%rsp)
 817              	.LVL107:
 818 090a B8000000 		movl	$0, %eax
 818      00
 819              	.LVL108:
 131:matmultbintrinsics.c **** 	const PetscInt mnos = dim;
 132:matmultbintrinsics.c **** 	const PetscScalar *xt[7];
 133:matmultbintrinsics.c **** 	__m128d mx0, msum0, msum1,msum3, mc0, mc1;
 134:matmultbintrinsics.c **** 	for(l=0;l<7;l++)
 135:matmultbintrinsics.c **** 		xt[l] = x + (idx[l] + idy[l]*lda3 + idz[l]*lda2)*dof;
 820              		.loc 1 136 0
 821 090f 4C8D6424 		leaq	-72(%rsp), %r12
 821      B8
 822 0914 448B6C24 		movl	-96(%rsp), %r13d
 822      A0
 823 0919 448B7424 		movl	56(%rsp), %r14d
 823      38
 824 091e 448B7C24 		movl	80(%rsp), %r15d
 824      50
 825              	.LVL109:
 826              	.L55:
 827 0923 4489F5   		movl	%r14d, %ebp
 828 0926 410FAF2C 		imull	(%r8,%rax), %ebp
 828      00
 829 092b 032C01   		addl	(%rcx,%rax), %ebp
 830 092e 4489EB   		movl	%r13d, %ebx
 831 0931 410FAF1C 		imull	(%r9,%rax), %ebx
 831      01
 832 0936 8D5C1D00 		leal	0(%rbp,%rbx), %ebx
GAS LISTING /tmp/cc55sAij.s 			page 23


 833 093a 410FAFDF 		imull	%r15d, %ebx
 834 093e 4863DB   		movslq	%ebx, %rbx
 835 0941 488D1CDE 		leaq	(%rsi,%rbx,8), %rbx
 836 0945 49891C44 		movq	%rbx, (%r12,%rax,2)
 837 0949 4883C004 		addq	$4, %rax
 135:matmultbintrinsics.c **** 		xt[l] = x + (idx[l] + idy[l]*lda3 + idz[l]*lda2)*dof;
 838              		.loc 1 135 0
 839 094d 4883F81C 		cmpq	$28, %rax
 840 0951 75D0     		jne	.L55
 841              	.LVL110:
 842              	.LBB156:
 843              	.LBB157:
 844              		.file 2 "/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h"
   0:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009
   1:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    Free Software Foundation, Inc.
   2:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
   3:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    This file is part of GCC.
   4:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
   5:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    GCC is free software; you can redistribute it and/or modify
   6:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    it under the terms of the GNU General Public License as published by
   7:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    the Free Software Foundation; either version 3, or (at your option)
   8:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    any later version.
   9:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  10:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    GCC is distributed in the hope that it will be useful,
  11:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    GNU General Public License for more details.
  14:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  15:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    Under Section 7 of GPL version 3, you are granted additional
  16:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    permissions described in the GCC Runtime Library Exception, version
  17:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    3.1, as published by the Free Software Foundation.
  18:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  19:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    You should have received a copy of the GNU General Public License and
  20:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    a copy of the GCC Runtime Library Exception along with this program;
  21:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  22:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    <http://www.gnu.org/licenses/>.  */
  23:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  24:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Implemented from the specification included in the Intel C++ Compiler
  25:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    User Guide and Reference, version 9.0.  */
  26:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  27:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #ifndef _EMMINTRIN_H_INCLUDED
  28:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #define _EMMINTRIN_H_INCLUDED
  29:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  30:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #ifndef __SSE2__
  31:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** # error "SSE2 instruction set not enabled"
  32:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #else
  33:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  34:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* We need definitions from the SSE header files*/
  35:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #include <xmmintrin.h>
  36:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  37:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* SSE2 */
  38:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef double __v2df __attribute__ ((__vector_size__ (16)));
  39:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef long long __v2di __attribute__ ((__vector_size__ (16)));
  40:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef int __v4si __attribute__ ((__vector_size__ (16)));
  41:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef short __v8hi __attribute__ ((__vector_size__ (16)));
  42:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef char __v16qi __attribute__ ((__vector_size__ (16)));
  43:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
GAS LISTING /tmp/cc55sAij.s 			page 24


  44:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* The Intel API is flexible enough that we must allow aliasing with other
  45:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    vector types, and their scalar components.  */
  46:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));
  47:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** typedef double __m128d __attribute__ ((__vector_size__ (16), __may_alias__));
  48:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  49:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a selector for use with the SHUFPD instruction.  */
  50:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #define _MM_SHUFFLE2(fp1,fp0) \
  51:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****  (((fp1) << 1) | (fp0))
  52:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  53:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with element 0 as F and the rest zero.  */
  54:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  55:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_set_sd (double __F)
  56:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  57:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __F, 0.0 };
  58:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  59:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  60:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with both elements equal to F.  */
  61:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  62:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_set1_pd (double __F)
  63:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  64:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __F, __F };
  65:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  66:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  67:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  68:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_set_pd1 (double __F)
  69:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  70:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return _mm_set1_pd (__F);
  71:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  72:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  73:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with the lower value X and upper value W.  */
  74:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  75:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_set_pd (double __W, double __X)
  76:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  77:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 845              		.loc 2 78 0
 846 0953 660F57C9 		xorpd	%xmm1, %xmm1
 847              	.LVL111:
 848              	.LBE157:
 849              	.LBE156:
 850              	.LBB158:
 851              	.LBB159:
 852 0957 660F28D1 		movapd	%xmm1, %xmm2
 853              	.LVL112:
 854              	.LBE159:
 855              	.LBE158:
 136:matmultbintrinsics.c **** 	
 137:matmultbintrinsics.c **** 	for(k = 0; k < 1; k++)
 138:matmultbintrinsics.c **** 	{
 139:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 140:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 141:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 142:matmultbintrinsics.c ****                 for(l=mnos;l<nos;l++)
 856              		.loc 1 143 0
 857 095b 4539D3   		cmpl	%r10d, %r11d
 858 095e 7D34     		jge	.L56
 859 0960 4489D8   		movl	%r11d, %eax
 860              	.LVL113:
GAS LISTING /tmp/cc55sAij.s 			page 25


 861              	.L57:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  79:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  80:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with the lower value W and upper value X.  */
  81:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  82:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_setr_pd (double __W, double __X)
  83:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  84:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __W, __X };
  85:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  86:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  87:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector of zeros.  */
  88:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  89:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_setzero_pd (void)
  90:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  91:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ 0.0, 0.0 };
  92:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
  93:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
  94:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Sets the low DPFP value of A from the low value of B.  */
  95:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  96:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_move_sd (__m128d __A, __m128d __B)
  97:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
  98:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d) __builtin_ia32_movsd ((__v2df)__A, (__v2df)__B);
  99:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 100:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 101:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Load two DPFP values from P.  The address must be 16-byte aligned.  */
 102:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 103:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_load_pd (double const *__P)
 104:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 105:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return *(__m128d *)__P;
 106:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 107:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 108:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Load two DPFP values from P.  The address need not be 16-byte aligned.  */
 109:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 110:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_loadu_pd (double const *__P)
 111:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 112:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 862              		.loc 2 113 0
 863 0963 4863C8   		movslq	%eax, %rcx
 864              	.LBB160:
 865              	.LBB161:
 866 0966 488B5CCC 		movq	-72(%rsp,%rcx,8), %rbx
 866      B8
 867 096b 660F1003 		movupd	(%rbx), %xmm0
 868              	.LVL114:
 869              	.LBE161:
 870              	.LBE160:
 871              	.LBB162:
 872              	.LBB163:
 873 096f 488B0CCF 		movq	(%rdi,%rcx,8), %rcx
 874              	.LVL115:
 875 0973 660F1021 		movupd	(%rcx), %xmm4
 876              	.LVL116:
 877              	.LBE163:
 878              	.LBE162:
 879              	.LBB164:
 880              	.LBB165:
 881 0977 660F1059 		movupd	16(%rcx), %xmm3
GAS LISTING /tmp/cc55sAij.s 			page 26


 881      10
 882              	.LVL117:
 883              	.LBE165:
 884              	.LBE164:
 885              	.LBB166:
 886              	.LBB167:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 114:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 115:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with all two elements equal to *P.  */
 116:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 117:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_load1_pd (double const *__P)
 118:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 119:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return _mm_set1_pd (*__P);
 120:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 121:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 122:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Create a vector with element 0 as *P and the rest zero.  */
 123:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 124:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_load_sd (double const *__P)
 125:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 126:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return _mm_set_sd (*__P);
 127:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 128:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 129:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 130:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_load_pd1 (double const *__P)
 131:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 132:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return _mm_load1_pd (__P);
 133:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 134:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 135:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Load two DPFP values in reverse order.  The address must be aligned.  */
 136:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 137:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_loadr_pd (double const *__P)
 138:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 139:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __m128d __tmp = _mm_load_pd (__P);
 140:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_shufpd (__tmp, __tmp, _MM_SHUFFLE2 (0,1));
 141:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 142:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 143:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Store two DPFP values.  The address must be 16-byte aligned.  */
 144:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 145:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_store_pd (double *__P, __m128d __A)
 146:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 147:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   *(__m128d *)__P = __A;
 148:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 149:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 150:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Store two DPFP values.  The address need not be 16-byte aligned.  */
 151:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 152:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_storeu_pd (double *__P, __m128d __A)
 153:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 154:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 156:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 157:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Stores the lower DPFP value.  */
 158:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 159:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_store_sd (double *__P, __m128d __A)
 160:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 161:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   *__P = __builtin_ia32_vec_ext_v2df (__A, 0);
 162:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 163:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
GAS LISTING /tmp/cc55sAij.s 			page 27


 164:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline double __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 165:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_cvtsd_f64 (__m128d __A)
 166:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 167:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_vec_ext_v2df (__A, 0);
 168:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 169:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 170:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 171:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_storel_pd (double *__P, __m128d __A)
 172:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 173:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   _mm_store_sd (__P, __A);
 174:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 175:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 176:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Stores the upper DPFP value.  */
 177:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 178:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_storeh_pd (double *__P, __m128d __A)
 179:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 180:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   *__P = __builtin_ia32_vec_ext_v2df (__A, 1);
 181:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 182:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 183:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Store the lower DPFP value across two words.
 184:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****    The address must be 16-byte aligned.  */
 185:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 186:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_store1_pd (double *__P, __m128d __A)
 187:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 188:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, _MM_SHUFFLE2 (0,0)));
 189:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 190:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 191:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 192:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_store_pd1 (double *__P, __m128d __A)
 193:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 194:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   _mm_store1_pd (__P, __A);
 195:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 196:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 197:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Store two DPFP values in reverse order.  The address must be aligned.  */
 198:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 199:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_storer_pd (double *__P, __m128d __A)
 200:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 201:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   _mm_store_pd (__P, __builtin_ia32_shufpd (__A, __A, _MM_SHUFFLE2 (0,1)));
 202:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 203:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 204:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 205:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_cvtsi128_si32 (__m128i __A)
 206:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 207:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_vec_ext_v4si ((__v4si)__A, 0);
 208:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 209:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 210:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #ifdef __x86_64__
 211:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Intel intrinsic.  */
 212:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 213:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_cvtsi128_si64 (__m128i __A)
 214:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 215:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);
 216:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 217:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 218:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** /* Microsoft intrinsic.  */
 219:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 220:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_cvtsi128_si64x (__m128i __A)
GAS LISTING /tmp/cc55sAij.s 			page 28


 221:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 222:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_vec_ext_v2di ((__v2di)__A, 0);
 223:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 224:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** #endif
 225:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 226:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 227:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_add_pd (__m128d __A, __m128d __B)
 228:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 229:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 231:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 232:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 233:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_add_sd (__m128d __A, __m128d __B)
 234:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 235:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addsd ((__v2df)__A, (__v2df)__B);
 236:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 237:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 238:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 239:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_sub_pd (__m128d __A, __m128d __B)
 240:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 241:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_subpd ((__v2df)__A, (__v2df)__B);
 242:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 243:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 244:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 245:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_sub_sd (__m128d __A, __m128d __B)
 246:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 247:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_subsd ((__v2df)__A, (__v2df)__B);
 248:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** }
 249:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** 
 250:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
 251:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** _mm_mul_pd (__m128d __A, __m128d __B)
 252:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h **** {
 253:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_mulpd ((__v2df)__A, (__v2df)__B);
 887              		.loc 2 254 0
 888 097c 660F59E0 		mulpd	%xmm0, %xmm4
 889              	.LVL118:
 890              	.LBE167:
 891              	.LBE166:
 892              	.LBB168:
 893              	.LBB169:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 894              		.loc 2 230 0
 895 0980 660F58CC 		addpd	%xmm4, %xmm1
 896              	.LVL119:
 897              	.LBE169:
 898              	.LBE168:
 899              	.LBB170:
 900              	.LBB171:
 901              		.loc 2 254 0
 902 0984 660F59C3 		mulpd	%xmm3, %xmm0
 903              	.LVL120:
 904              	.LBE171:
 905              	.LBE170:
 906              	.LBB172:
 907              	.LBB173:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 908              		.loc 2 230 0
GAS LISTING /tmp/cc55sAij.s 			page 29


 909 0988 660F58D0 		addpd	%xmm0, %xmm2
 910              	.LVL121:
 911              	.LBE173:
 912              	.LBE172:
 913              		.loc 1 143 0
 914 098c 83C001   		addl	$1, %eax
 915              	.LVL122:
 916 098f 4139C2   		cmpl	%eax, %r10d
 917 0992 7FCF     		jg	.L57
 918              	.LVL123:
 919              	.L56:
 920              	.LBB174:
 921              	.LBB175:
 922              		.file 3 "/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h"
   0:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** /* Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009
   1:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    Free Software Foundation, Inc.
   2:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
   3:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    This file is part of GCC.
   4:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
   5:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    GCC is free software; you can redistribute it and/or modify
   6:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    it under the terms of the GNU General Public License as published by
   7:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    the Free Software Foundation; either version 3, or (at your option)
   8:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    any later version.
   9:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  10:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    GCC is distributed in the hope that it will be useful,
  11:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    GNU General Public License for more details.
  14:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  15:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    Under Section 7 of GPL version 3, you are granted additional
  16:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    permissions described in the GCC Runtime Library Exception, version
  17:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    3.1, as published by the Free Software Foundation.
  18:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  19:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    You should have received a copy of the GNU General Public License and
  20:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    a copy of the GCC Runtime Library Exception along with this program;
  21:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  22:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    <http://www.gnu.org/licenses/>.  */
  23:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  24:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** /* Implemented from the specification included in the Intel C++ Compiler
  25:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****    User Guide and Reference, version 9.0.  */
  26:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  27:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #ifndef _PMMINTRIN_H_INCLUDED
  28:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _PMMINTRIN_H_INCLUDED
  29:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  30:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #ifndef __SSE3__
  31:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** # error "SSE3 instruction set not enabled"
  32:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #else
  33:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  34:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** /* We need definitions from the SSE2 and SSE header files*/
  35:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #include <emmintrin.h>
  36:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  37:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** /* Additional bits in the MXCSR.  */
  38:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _MM_DENORMALS_ZERO_MASK		0x0040
  39:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _MM_DENORMALS_ZERO_ON		0x0040
  40:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _MM_DENORMALS_ZERO_OFF		0x0000
  41:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  42:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _MM_SET_DENORMALS_ZERO_MODE(mode) \
GAS LISTING /tmp/cc55sAij.s 			page 30


  43:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   _mm_setcsr ((_mm_getcsr () & ~_MM_DENORMALS_ZERO_MASK) | (mode))
  44:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** #define _MM_GET_DENORMALS_ZERO_MODE() \
  45:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   (_mm_getcsr() & _MM_DENORMALS_ZERO_MASK)
  46:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  47:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  48:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_addsub_ps (__m128 __X, __m128 __Y)
  49:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  50:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128) __builtin_ia32_addsubps ((__v4sf)__X, (__v4sf)__Y);
  51:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  52:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  53:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  54:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_hadd_ps (__m128 __X, __m128 __Y)
  55:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  56:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128) __builtin_ia32_haddps ((__v4sf)__X, (__v4sf)__Y);
  57:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  58:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  59:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  60:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_hsub_ps (__m128 __X, __m128 __Y)
  61:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  62:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128) __builtin_ia32_hsubps ((__v4sf)__X, (__v4sf)__Y);
  63:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  64:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  65:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  66:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_movehdup_ps (__m128 __X)
  67:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  68:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128) __builtin_ia32_movshdup ((__v4sf)__X);
  69:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  70:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  71:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  72:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_moveldup_ps (__m128 __X)
  73:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  74:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128) __builtin_ia32_movsldup ((__v4sf)__X);
  75:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  76:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  77:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_addsub_pd (__m128d __X, __m128d __Y)
  79:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  80:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128d) __builtin_ia32_addsubpd ((__v2df)__X, (__v2df)__Y);
  81:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** }
  82:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** 
  83:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))
  84:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** _mm_hadd_pd (__m128d __X, __m128d __Y)
  85:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h **** {
  86:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/pmmintrin.h ****   return (__m128d) __builtin_ia32_haddpd ((__v2df)__X, (__v2df)__Y);
 923              		.loc 3 87 0
 924 0994 660F7CCA 		haddpd	%xmm2, %xmm1
 925              	.LVL124:
 926              	.LBE175:
 927              	.LBE174:
 928              	.LBB176:
 929              	.LBB177:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 930              		.loc 2 155 0
 931 0998 660F110A 		movupd	%xmm1, (%rdx)
 932              	.LVL125:
 933              	.LBE177:
 934              	.LBE176:
GAS LISTING /tmp/cc55sAij.s 			page 31


 143:matmultbintrinsics.c ****                 {
 144:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 145:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 146:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 147:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 148:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 149:matmultbintrinsics.c ****                 }
 150:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 151:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 152:matmultbintrinsics.c **** 	}
 153:matmultbintrinsics.c **** 
 154:matmultbintrinsics.c **** 	for(/*k = 1*/; k < lda3; k++)
 935              		.loc 1 155 0
 936 099c 41BC0100 		movl	$1, %r12d
 936      0000
 937 09a2 837C2438 		cmpl	$1, 56(%rsp)
 937      01
 938 09a7 0F8ECA00 		jle	.L59
 938      0000
 939              	.LVL126:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 940              		.loc 1 126 0
 941 09ad 448B6C24 		movl	80(%rsp), %r13d
 941      50
 942 09b2 4489E9   		movl	%r13d, %ecx
 943 09b5 410FAFCD 		imull	%r13d, %ecx
 944 09b9 894C24A4 		movl	%ecx, -92(%rsp)
 945 09bd 4189CC   		movl	%ecx, %r12d
 946 09c0 4589E9   		movl	%r13d, %r9d
 947              	.LVL127:
 948 09c3 41B80100 		movl	$1, %r8d
 948      0000
 949              	.LVL128:
 950              	.LBB178:
 951              	.LBB179:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 952              		.loc 2 78 0
 953 09c9 660F57ED 		xorpd	%xmm5, %xmm5
 954              	.LBE179:
 955              	.LBE178:
 956              	.LBB181:
 957              	.LBB182:
 958 09cd 660F28F5 		movapd	%xmm5, %xmm6
 959              	.LBE182:
 960              	.LBE181:
 155:matmultbintrinsics.c **** 	{
 156:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 157:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 158:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 159:matmultbintrinsics.c **** 		for(l=mnos-1;l<nos;l++)
 961              		.loc 1 160 0
 962 09d1 458D73FF 		leal	-1(%r11), %r14d
 963 09d5 44895C24 		movl	%r11d, -76(%rsp)
 963      B4
 964              	.LVL129:
 965              	.L62:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
GAS LISTING /tmp/cc55sAij.s 			page 32


 966              		.loc 1 126 0
 967 09da 4589CB   		movl	%r9d, %r11d
 968              	.LVL130:
 969              	.LBB184:
 970              	.LBB180:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 971              		.loc 2 78 0
 972 09dd 660F28D5 		movapd	%xmm5, %xmm2
 973              	.LVL131:
 974              	.LBE180:
 975              	.LBE184:
 976              	.LBB185:
 977              	.LBB183:
 978 09e1 660F28CE 		movapd	%xmm6, %xmm1
 979              	.LVL132:
 980              	.LBE183:
 981              	.LBE185:
 982              		.loc 1 160 0
 983 09e5 4489F0   		movl	%r14d, %eax
 984              	.LVL133:
 985 09e8 4539F2   		cmpl	%r14d, %r10d
 986 09eb 7E5C     		jle	.L60
 160:matmultbintrinsics.c **** 		{
 161:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 987              		.loc 1 162 0
 988 09ed 4963E9   		movslq	%r9d, %rbp
 989 09f0 48C1E503 		salq	$3, %rbp
 162:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 990              		.loc 1 163 0
 991 09f4 4963CC   		movslq	%r12d, %rcx
 992 09f7 488D34CD 		leaq	0(,%rcx,8), %rsi
 992      00000000 
 163:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 993              		.loc 1 164 0
 994 09ff 488D1CCD 		leaq	16(,%rcx,8), %rbx
 994      10000000 
 995              	.LVL134:
 996              	.L61:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 997              		.loc 2 113 0
 998 0a07 4863C8   		movslq	%eax, %rcx
 999 0a0a 4989EF   		movq	%rbp, %r15
 1000 0a0d 4C037CCC 		addq	-72(%rsp,%rcx,8), %r15
 1000      B8
 1001              	.LBB186:
 1002              	.LBB187:
 1003 0a12 66410F10 		movupd	(%r15), %xmm0
 1003      07
 1004              	.LVL135:
 1005              	.LBE187:
 1006              	.LBE186:
 163:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1007              		.loc 1 163 0
 1008 0a17 488D0CCF 		leaq	(%rdi,%rcx,8), %rcx
 1009              	.LVL136:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1010              		.loc 2 113 0
GAS LISTING /tmp/cc55sAij.s 			page 33


 1011 0a1b 4989F7   		movq	%rsi, %r15
 1012 0a1e 4C0339   		addq	(%rcx), %r15
 1013              	.LBB188:
 1014              	.LBB189:
 1015 0a21 66410F10 		movupd	(%r15), %xmm4
 1015      27
 1016              	.LVL137:
 1017              	.LBE189:
 1018              	.LBE188:
 1019 0a26 488B09   		movq	(%rcx), %rcx
 1020              	.LVL138:
 1021 0a29 488D0C0B 		leaq	(%rbx,%rcx), %rcx
 1022              	.LVL139:
 1023              	.LBB190:
 1024              	.LBB191:
 1025 0a2d 660F1019 		movupd	(%rcx), %xmm3
 1026              	.LVL140:
 1027              	.LBE191:
 1028              	.LBE190:
 1029              	.LBB192:
 1030              	.LBB193:
 1031              		.loc 2 254 0
 1032 0a31 660F59E0 		mulpd	%xmm0, %xmm4
 1033              	.LVL141:
 1034              	.LBE193:
 1035              	.LBE192:
 1036              	.LBB194:
 1037              	.LBB195:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1038              		.loc 2 230 0
 1039 0a35 660F58D4 		addpd	%xmm4, %xmm2
 1040              	.LVL142:
 1041              	.LBE195:
 1042              	.LBE194:
 1043              	.LBB196:
 1044              	.LBB197:
 1045              		.loc 2 254 0
 1046 0a39 660F59C3 		mulpd	%xmm3, %xmm0
 1047              	.LVL143:
 1048              	.LBE197:
 1049              	.LBE196:
 1050              	.LBB198:
 1051              	.LBB199:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1052              		.loc 2 230 0
 1053 0a3d 660F58C8 		addpd	%xmm0, %xmm1
 1054              	.LVL144:
 1055              	.LBE199:
 1056              	.LBE198:
 160:matmultbintrinsics.c **** 		for(l=mnos-1;l<nos;l++)
 1057              		.loc 1 160 0
 1058 0a41 83C001   		addl	$1, %eax
 1059              	.LVL145:
 1060 0a44 4139C2   		cmpl	%eax, %r10d
 1061 0a47 7FBE     		jg	.L61
 1062              	.LVL146:
 1063              	.L60:
GAS LISTING /tmp/cc55sAij.s 			page 34


 1064              	.LBB200:
 1065              	.LBB201:
 1066              		.loc 3 87 0
 1067 0a49 660F7CD1 		haddpd	%xmm1, %xmm2
 1068              	.LVL147:
 1069              	.LBE201:
 1070              	.LBE200:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1071              		.loc 2 155 0
 1072 0a4d 4D63DB   		movslq	%r11d, %r11
 1073              	.LBB202:
 1074              	.LBB203:
 1075 0a50 66420F11 		movupd	%xmm2, (%rdx,%r11,8)
 1075      14DA
 1076              	.LBE203:
 1077              	.LBE202:
 155:matmultbintrinsics.c **** 	for(/*k = 1*/; k < lda3; k++)
 1078              		.loc 1 155 0
 1079 0a56 4183C001 		addl	$1, %r8d
 1080              	.LVL148:
 1081 0a5a 4501E9   		addl	%r13d, %r9d
 1082              	.LVL149:
 1083 0a5d 44036424 		addl	-92(%rsp), %r12d
 1083      A4
 1084              	.LVL150:
 1085 0a62 44394424 		cmpl	%r8d, 56(%rsp)
 1085      38
 1086 0a67 0F8F6DFF 		jg	.L62
 1086      FFFF
 1087              	.LVL151:
 1088 0a6d 448B5C24 		movl	-76(%rsp), %r11d
 1088      B4
 1089              	.LVL152:
 1090 0a72 448B6424 		movl	56(%rsp), %r12d
 1090      38
 1091              	.LVL153:
 1092              	.L59:
 164:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 165:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 166:matmultbintrinsics.c **** 		}
 167:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 168:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 169:matmultbintrinsics.c **** 	}
 170:matmultbintrinsics.c **** 
 171:matmultbintrinsics.c **** 	for(/*k = lda3*/; k < lda2; k++)
 1093              		.loc 1 172 0
 1094 0a77 44396424 		cmpl	%r12d, -96(%rsp)
 1094      A0
 1095 0a7c 0F8ECC00 		jle	.L63
 1095      0000
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1096              		.loc 1 126 0
 1097 0a82 448B6C24 		movl	80(%rsp), %r13d
 1097      50
 1098 0a87 4589E9   		movl	%r13d, %r9d
 1099 0a8a 450FAFCC 		imull	%r12d, %r9d
 1100 0a8e 4489E8   		movl	%r13d, %eax
GAS LISTING /tmp/cc55sAij.s 			page 35


 1101 0a91 410FAFC5 		imull	%r13d, %eax
 1102 0a95 894424A4 		movl	%eax, -92(%rsp)
 1103 0a99 4189C0   		movl	%eax, %r8d
 1104 0a9c 450FAFC4 		imull	%r12d, %r8d
 1105              	.LBB204:
 1106              	.LBB205:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1107              		.loc 2 78 0
 1108 0aa0 660F57ED 		xorpd	%xmm5, %xmm5
 1109              	.LBE205:
 1110              	.LBE204:
 1111              	.LBB207:
 1112              	.LBB208:
 1113 0aa4 660F28F5 		movapd	%xmm5, %xmm6
 1114              	.LBE208:
 1115              	.LBE207:
 172:matmultbintrinsics.c **** 	{
 173:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 174:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 175:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 176:matmultbintrinsics.c **** 		for(l=mnos-2;l<nos;l++)
 1116              		.loc 1 177 0
 1117 0aa8 458D73FE 		leal	-2(%r11), %r14d
 1118 0aac 44895C24 		movl	%r11d, -76(%rsp)
 1118      B4
 1119              	.L66:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1120              		.loc 1 126 0
 1121 0ab1 4589CB   		movl	%r9d, %r11d
 1122              	.LVL154:
 1123              	.LBB210:
 1124              	.LBB206:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1125              		.loc 2 78 0
 1126 0ab4 660F28D5 		movapd	%xmm5, %xmm2
 1127              	.LVL155:
 1128              	.LBE206:
 1129              	.LBE210:
 1130              	.LBB211:
 1131              	.LBB209:
 1132 0ab8 660F28CE 		movapd	%xmm6, %xmm1
 1133              	.LVL156:
 1134              	.LBE209:
 1135              	.LBE211:
 1136              		.loc 1 177 0
 1137 0abc 4489F0   		movl	%r14d, %eax
 1138              	.LVL157:
 1139 0abf 4539F2   		cmpl	%r14d, %r10d
 1140 0ac2 7E5C     		jle	.L64
 177:matmultbintrinsics.c **** 		{
 178:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 1141              		.loc 1 179 0
 1142 0ac4 4963E9   		movslq	%r9d, %rbp
 1143 0ac7 48C1E503 		salq	$3, %rbp
 179:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 1144              		.loc 1 180 0
 1145 0acb 4963C8   		movslq	%r8d, %rcx
GAS LISTING /tmp/cc55sAij.s 			page 36


 1146 0ace 488D34CD 		leaq	0(,%rcx,8), %rsi
 1146      00000000 
 180:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1147              		.loc 1 181 0
 1148 0ad6 488D1CCD 		leaq	16(,%rcx,8), %rbx
 1148      10000000 
 1149              	.LVL158:
 1150              	.L65:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1151              		.loc 2 113 0
 1152 0ade 4863C8   		movslq	%eax, %rcx
 1153 0ae1 4989EF   		movq	%rbp, %r15
 1154 0ae4 4C037CCC 		addq	-72(%rsp,%rcx,8), %r15
 1154      B8
 1155              	.LBB212:
 1156              	.LBB213:
 1157 0ae9 66410F10 		movupd	(%r15), %xmm0
 1157      07
 1158              	.LVL159:
 1159              	.LBE213:
 1160              	.LBE212:
 180:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1161              		.loc 1 180 0
 1162 0aee 488D0CCF 		leaq	(%rdi,%rcx,8), %rcx
 1163              	.LVL160:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1164              		.loc 2 113 0
 1165 0af2 4989F7   		movq	%rsi, %r15
 1166 0af5 4C0339   		addq	(%rcx), %r15
 1167              	.LBB214:
 1168              	.LBB215:
 1169 0af8 66410F10 		movupd	(%r15), %xmm4
 1169      27
 1170              	.LVL161:
 1171              	.LBE215:
 1172              	.LBE214:
 1173 0afd 488B09   		movq	(%rcx), %rcx
 1174              	.LVL162:
 1175 0b00 488D0C0B 		leaq	(%rbx,%rcx), %rcx
 1176              	.LVL163:
 1177              	.LBB216:
 1178              	.LBB217:
 1179 0b04 660F1019 		movupd	(%rcx), %xmm3
 1180              	.LVL164:
 1181              	.LBE217:
 1182              	.LBE216:
 1183              	.LBB218:
 1184              	.LBB219:
 1185              		.loc 2 254 0
 1186 0b08 660F59E0 		mulpd	%xmm0, %xmm4
 1187              	.LVL165:
 1188              	.LBE219:
 1189              	.LBE218:
 1190              	.LBB220:
 1191              	.LBB221:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1192              		.loc 2 230 0
GAS LISTING /tmp/cc55sAij.s 			page 37


 1193 0b0c 660F58D4 		addpd	%xmm4, %xmm2
 1194              	.LVL166:
 1195              	.LBE221:
 1196              	.LBE220:
 1197              	.LBB222:
 1198              	.LBB223:
 1199              		.loc 2 254 0
 1200 0b10 660F59C3 		mulpd	%xmm3, %xmm0
 1201              	.LVL167:
 1202              	.LBE223:
 1203              	.LBE222:
 1204              	.LBB224:
 1205              	.LBB225:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1206              		.loc 2 230 0
 1207 0b14 660F58C8 		addpd	%xmm0, %xmm1
 1208              	.LVL168:
 1209              	.LBE225:
 1210              	.LBE224:
 177:matmultbintrinsics.c **** 		for(l=mnos-2;l<nos;l++)
 1211              		.loc 1 177 0
 1212 0b18 83C001   		addl	$1, %eax
 1213              	.LVL169:
 1214 0b1b 4139C2   		cmpl	%eax, %r10d
 1215 0b1e 7FBE     		jg	.L65
 1216              	.LVL170:
 1217              	.L64:
 1218              	.LBB226:
 1219              	.LBB227:
 1220              		.loc 3 87 0
 1221 0b20 660F7CD1 		haddpd	%xmm1, %xmm2
 1222              	.LVL171:
 1223              	.LBE227:
 1224              	.LBE226:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1225              		.loc 2 155 0
 1226 0b24 4D63DB   		movslq	%r11d, %r11
 1227              	.LBB228:
 1228              	.LBB229:
 1229 0b27 66420F11 		movupd	%xmm2, (%rdx,%r11,8)
 1229      14DA
 1230              	.LBE229:
 1231              	.LBE228:
 172:matmultbintrinsics.c **** 	for(/*k = lda3*/; k < lda2; k++)
 1232              		.loc 1 172 0
 1233 0b2d 4183C401 		addl	$1, %r12d
 1234              	.LVL172:
 1235 0b31 4501E9   		addl	%r13d, %r9d
 1236              	.LVL173:
 1237 0b34 44034424 		addl	-92(%rsp), %r8d
 1237      A4
 1238              	.LVL174:
 1239 0b39 44396424 		cmpl	%r12d, -96(%rsp)
 1239      A0
 1240 0b3e 0F8F6DFF 		jg	.L66
 1240      FFFF
 1241              	.LVL175:
GAS LISTING /tmp/cc55sAij.s 			page 38


 1242 0b44 448B5C24 		movl	-76(%rsp), %r11d
 1242      B4
 1243              	.LVL176:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1244              		.loc 1 126 0
 1245 0b49 448B6424 		movl	-96(%rsp), %r12d
 1245      A0
 1246              	.LVL177:
 1247              	.L63:
 181:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 182:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 183:matmultbintrinsics.c **** 		}
 184:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 185:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 186:matmultbintrinsics.c **** 	}
 187:matmultbintrinsics.c **** 
 188:matmultbintrinsics.c **** 	for(/*k = lda2*/; k < (lda1- lda2); k++)
 1248              		.loc 1 189 0
 1249 0b4e 8B4C24B0 		movl	-80(%rsp), %ecx
 1250 0b52 2B4C24A0 		subl	-96(%rsp), %ecx
 1251 0b56 894C24A0 		movl	%ecx, -96(%rsp)
 1252 0b5a 4139CC   		cmpl	%ecx, %r12d
 1253 0b5d 0F8DD100 		jge	.L67
 1253      0000
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1254              		.loc 1 126 0
 1255 0b63 448B7C24 		movl	80(%rsp), %r15d
 1255      50
 1256 0b68 4589FE   		movl	%r15d, %r14d
 1257 0b6b 450FAFF4 		imull	%r12d, %r14d
 1258 0b6f 4489F8   		movl	%r15d, %eax
 1259 0b72 410FAFC7 		imull	%r15d, %eax
 1260 0b76 894424A4 		movl	%eax, -92(%rsp)
 1261 0b7a 4189C5   		movl	%eax, %r13d
 1262 0b7d 450FAFEC 		imull	%r12d, %r13d
 1263              	.LBB230:
 1264              	.LBB231:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1265              		.loc 2 78 0
 1266 0b81 660F57ED 		xorpd	%xmm5, %xmm5
 1267              	.LBE231:
 1268              	.LBE230:
 1269              	.LBB233:
 1270              	.LBB234:
 1271 0b85 660F28F5 		movapd	%xmm5, %xmm6
 1272              	.LBE234:
 1273              	.LBE233:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1274              		.loc 2 113 0
 1275 0b89 4C8D4C24 		leaq	-72(%rsp), %r9
 1275      B8
 1276 0b8e 44895C24 		movl	%r11d, -76(%rsp)
 1276      B4
 1277              	.L70:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1278              		.loc 1 126 0
 1279 0b93 4589F3   		movl	%r14d, %r11d
GAS LISTING /tmp/cc55sAij.s 			page 39


 1280              	.LVL178:
 1281 0b96 4489E8   		movl	%r13d, %eax
 1282              	.LVL179:
 1283              	.LBB236:
 1284              	.LBB232:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1285              		.loc 2 78 0
 1286 0b99 660F28D5 		movapd	%xmm5, %xmm2
 1287              	.LVL180:
 1288              	.LBE232:
 1289              	.LBE236:
 1290              	.LBB237:
 1291              	.LBB235:
 1292 0b9d 660F28CE 		movapd	%xmm6, %xmm1
 1293              	.LVL181:
 1294              	.LBE235:
 1295              	.LBE237:
 189:matmultbintrinsics.c **** 	{
 190:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 191:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 192:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 193:matmultbintrinsics.c **** 		for(l=0;l<nos;l++)
 1296              		.loc 1 194 0
 1297 0ba1 4585D2   		testl	%r10d, %r10d
 1298 0ba4 7E60     		jle	.L68
 194:matmultbintrinsics.c **** 		{
 195:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 1299              		.loc 1 196 0
 1300 0ba6 4D63C6   		movslq	%r14d, %r8
 1301 0ba9 49C1E003 		salq	$3, %r8
 196:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 1302              		.loc 1 197 0
 1303 0bad 4898     		cltq
 1304 0baf 488D2CC5 		leaq	0(,%rax,8), %rbp
 1304      00000000 
 197:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1305              		.loc 1 198 0
 1306 0bb7 488D34C5 		leaq	16(,%rax,8), %rsi
 1306      10000000 
 1307 0bbf B8000000 		movl	$0, %eax
 1307      00
 1308 0bc4 B9000000 		movl	$0, %ecx
 1308      00
 1309              	.LVL182:
 1310              	.L69:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1311              		.loc 2 113 0
 1312 0bc9 4C89C3   		movq	%r8, %rbx
 1313 0bcc 49031C01 		addq	(%r9,%rax), %rbx
 1314              	.LBB238:
 1315              	.LBB239:
 1316 0bd0 660F1003 		movupd	(%rbx), %xmm0
 1317              	.LVL183:
 1318              	.LBE239:
 1319              	.LBE238:
 1320 0bd4 4889EB   		movq	%rbp, %rbx
 1321 0bd7 48031C07 		addq	(%rdi,%rax), %rbx
GAS LISTING /tmp/cc55sAij.s 			page 40


 1322              	.LBB240:
 1323              	.LBB241:
 1324 0bdb 660F1023 		movupd	(%rbx), %xmm4
 1325              	.LVL184:
 1326              	.LBE241:
 1327              	.LBE240:
 1328 0bdf 4889F3   		movq	%rsi, %rbx
 1329 0be2 48031C07 		addq	(%rdi,%rax), %rbx
 1330              	.LBB242:
 1331              	.LBB243:
 1332 0be6 660F101B 		movupd	(%rbx), %xmm3
 1333              	.LVL185:
 1334              	.LBE243:
 1335              	.LBE242:
 1336              	.LBB244:
 1337              	.LBB245:
 1338              		.loc 2 254 0
 1339 0bea 660F59E0 		mulpd	%xmm0, %xmm4
 1340              	.LVL186:
 1341              	.LBE245:
 1342              	.LBE244:
 1343              	.LBB246:
 1344              	.LBB247:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1345              		.loc 2 230 0
 1346 0bee 660F58D4 		addpd	%xmm4, %xmm2
 1347              	.LVL187:
 1348              	.LBE247:
 1349              	.LBE246:
 1350              	.LBB248:
 1351              	.LBB249:
 1352              		.loc 2 254 0
 1353 0bf2 660F59C3 		mulpd	%xmm3, %xmm0
 1354              	.LVL188:
 1355              	.LBE249:
 1356              	.LBE248:
 1357              	.LBB250:
 1358              	.LBB251:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1359              		.loc 2 230 0
 1360 0bf6 660F58C8 		addpd	%xmm0, %xmm1
 1361              	.LVL189:
 1362              	.LBE251:
 1363              	.LBE250:
 194:matmultbintrinsics.c **** 		for(l=0;l<nos;l++)
 1364              		.loc 1 194 0
 1365 0bfa 83C101   		addl	$1, %ecx
 1366              	.LVL190:
 1367 0bfd 4883C008 		addq	$8, %rax
 1368              	.LVL191:
 1369 0c01 4139CA   		cmpl	%ecx, %r10d
 1370 0c04 7FC3     		jg	.L69
 1371              	.LVL192:
 1372              	.L68:
 1373              	.LBB252:
 1374              	.LBB253:
 1375              		.loc 3 87 0
GAS LISTING /tmp/cc55sAij.s 			page 41


 1376 0c06 660F7CD1 		haddpd	%xmm1, %xmm2
 1377              	.LVL193:
 1378              	.LBE253:
 1379              	.LBE252:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1380              		.loc 2 155 0
 1381 0c0a 4D63DB   		movslq	%r11d, %r11
 1382              	.LBB254:
 1383              	.LBB255:
 1384 0c0d 66420F11 		movupd	%xmm2, (%rdx,%r11,8)
 1384      14DA
 1385              	.LBE255:
 1386              	.LBE254:
 189:matmultbintrinsics.c **** 	for(/*k = lda2*/; k < (lda1- lda2); k++)
 1387              		.loc 1 189 0
 1388 0c13 4183C401 		addl	$1, %r12d
 1389              	.LVL194:
 1390 0c17 4501FE   		addl	%r15d, %r14d
 1391              	.LVL195:
 1392 0c1a 44036C24 		addl	-92(%rsp), %r13d
 1392      A4
 1393              	.LVL196:
 1394 0c1f 443B6424 		cmpl	-96(%rsp), %r12d
 1394      A0
 1395 0c24 0F8C69FF 		jl	.L70
 1395      FFFF
 1396              	.LVL197:
 1397 0c2a 448B5C24 		movl	-76(%rsp), %r11d
 1397      B4
 1398              	.LVL198:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1399              		.loc 1 126 0
 1400 0c2f 448B6424 		movl	-96(%rsp), %r12d
 1400      A0
 1401              	.LVL199:
 1402              	.L67:
 198:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 199:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 200:matmultbintrinsics.c **** 		}
 201:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 202:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 203:matmultbintrinsics.c **** 	}
 204:matmultbintrinsics.c **** 
 205:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda2)*/; k < (lda1 - lda3); k++)
 1403              		.loc 1 206 0
 1404 0c34 8B4C24B0 		movl	-80(%rsp), %ecx
 1405 0c38 2B4C2438 		subl	56(%rsp), %ecx
 1406 0c3c 894C24A0 		movl	%ecx, -96(%rsp)
 1407 0c40 4139CC   		cmpl	%ecx, %r12d
 1408 0c43 0F8DE500 		jge	.L71
 1408      0000
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1409              		.loc 1 126 0
 1410 0c49 448B7C24 		movl	80(%rsp), %r15d
 1410      50
 1411 0c4e 4589FE   		movl	%r15d, %r14d
 1412 0c51 450FAFF4 		imull	%r12d, %r14d
GAS LISTING /tmp/cc55sAij.s 			page 42


 1413 0c55 4489F8   		movl	%r15d, %eax
 1414 0c58 410FAFC7 		imull	%r15d, %eax
 1415 0c5c 894424A8 		movl	%eax, -88(%rsp)
 1416 0c60 4189C5   		movl	%eax, %r13d
 1417 0c63 450FAFEC 		imull	%r12d, %r13d
 1418 0c67 4489E0   		movl	%r12d, %eax
 1419              	.LBB256:
 1420              	.LBB257:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1421              		.loc 2 78 0
 1422 0c6a 660F57ED 		xorpd	%xmm5, %xmm5
 1423              	.LBE257:
 1424              	.LBE256:
 1425              	.LBB259:
 1426              	.LBB260:
 1427 0c6e 660F28F5 		movapd	%xmm5, %xmm6
 1428              	.LBE260:
 1429              	.LBE259:
 206:matmultbintrinsics.c **** 	{
 207:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 208:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 209:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 210:matmultbintrinsics.c **** 		for(l=0;l<nos-1;l++)
 1430              		.loc 1 211 0
 1431 0c72 458D42FF 		leal	-1(%r10), %r8d
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1432              		.loc 2 113 0
 1433 0c76 4C8D6424 		leaq	-72(%rsp), %r12
 1433      B8
 1434              	.LVL200:
 1435 0c7b 44895424 		movl	%r10d, -92(%rsp)
 1435      A4
 1436 0c80 4189C2   		movl	%eax, %r10d
 1437 0c83 44895C24 		movl	%r11d, -76(%rsp)
 1437      B4
 1438              	.LVL201:
 1439              	.L74:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1440              		.loc 1 126 0
 1441 0c88 4589F3   		movl	%r14d, %r11d
 1442              	.LVL202:
 1443 0c8b 4489E8   		movl	%r13d, %eax
 1444              	.LVL203:
 1445              	.LBB262:
 1446              	.LBB258:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1447              		.loc 2 78 0
 1448 0c8e 660F28D5 		movapd	%xmm5, %xmm2
 1449              	.LVL204:
 1450              	.LBE258:
 1451              	.LBE262:
 1452              	.LBB263:
 1453              	.LBB261:
 1454 0c92 660F28CE 		movapd	%xmm6, %xmm1
 1455              	.LVL205:
 1456              	.LBE261:
 1457              	.LBE263:
GAS LISTING /tmp/cc55sAij.s 			page 43


 1458              		.loc 1 211 0
 1459 0c96 4585C0   		testl	%r8d, %r8d
 1460 0c99 7E60     		jle	.L72
 211:matmultbintrinsics.c **** 		{
 212:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 1461              		.loc 1 213 0
 1462 0c9b 4D63CE   		movslq	%r14d, %r9
 1463 0c9e 49C1E103 		salq	$3, %r9
 213:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 1464              		.loc 1 214 0
 1465 0ca2 4898     		cltq
 1466 0ca4 488D2CC5 		leaq	0(,%rax,8), %rbp
 1466      00000000 
 214:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1467              		.loc 1 215 0
 1468 0cac 488D34C5 		leaq	16(,%rax,8), %rsi
 1468      10000000 
 1469 0cb4 B8000000 		movl	$0, %eax
 1469      00
 1470 0cb9 B9000000 		movl	$0, %ecx
 1470      00
 1471              	.LVL206:
 1472              	.L73:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1473              		.loc 2 113 0
 1474 0cbe 4C89CB   		movq	%r9, %rbx
 1475 0cc1 49031C04 		addq	(%r12,%rax), %rbx
 1476              	.LBB264:
 1477              	.LBB265:
 1478 0cc5 660F1003 		movupd	(%rbx), %xmm0
 1479              	.LVL207:
 1480              	.LBE265:
 1481              	.LBE264:
 1482 0cc9 4889EB   		movq	%rbp, %rbx
 1483 0ccc 48031C07 		addq	(%rdi,%rax), %rbx
 1484              	.LBB266:
 1485              	.LBB267:
 1486 0cd0 660F1023 		movupd	(%rbx), %xmm4
 1487              	.LVL208:
 1488              	.LBE267:
 1489              	.LBE266:
 1490 0cd4 4889F3   		movq	%rsi, %rbx
 1491 0cd7 48031C07 		addq	(%rdi,%rax), %rbx
 1492              	.LBB268:
 1493              	.LBB269:
 1494 0cdb 660F101B 		movupd	(%rbx), %xmm3
 1495              	.LVL209:
 1496              	.LBE269:
 1497              	.LBE268:
 1498              	.LBB270:
 1499              	.LBB271:
 1500              		.loc 2 254 0
 1501 0cdf 660F59E0 		mulpd	%xmm0, %xmm4
 1502              	.LVL210:
 1503              	.LBE271:
 1504              	.LBE270:
 1505              	.LBB272:
GAS LISTING /tmp/cc55sAij.s 			page 44


 1506              	.LBB273:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1507              		.loc 2 230 0
 1508 0ce3 660F58D4 		addpd	%xmm4, %xmm2
 1509              	.LVL211:
 1510              	.LBE273:
 1511              	.LBE272:
 1512              	.LBB274:
 1513              	.LBB275:
 1514              		.loc 2 254 0
 1515 0ce7 660F59C3 		mulpd	%xmm3, %xmm0
 1516              	.LVL212:
 1517              	.LBE275:
 1518              	.LBE274:
 1519              	.LBB276:
 1520              	.LBB277:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1521              		.loc 2 230 0
 1522 0ceb 660F58C8 		addpd	%xmm0, %xmm1
 1523              	.LVL213:
 1524              	.LBE277:
 1525              	.LBE276:
 211:matmultbintrinsics.c **** 		for(l=0;l<nos-1;l++)
 1526              		.loc 1 211 0
 1527 0cef 83C101   		addl	$1, %ecx
 1528              	.LVL214:
 1529 0cf2 4883C008 		addq	$8, %rax
 1530              	.LVL215:
 1531 0cf6 4439C1   		cmpl	%r8d, %ecx
 1532 0cf9 7CC3     		jl	.L73
 1533              	.LVL216:
 1534              	.L72:
 1535              	.LBB278:
 1536              	.LBB279:
 1537              		.loc 3 87 0
 1538 0cfb 660F7CD1 		haddpd	%xmm1, %xmm2
 1539              	.LVL217:
 1540              	.LBE279:
 1541              	.LBE278:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1542              		.loc 2 155 0
 1543 0cff 4D63DB   		movslq	%r11d, %r11
 1544              	.LBB280:
 1545              	.LBB281:
 1546 0d02 66420F11 		movupd	%xmm2, (%rdx,%r11,8)
 1546      14DA
 1547              	.LBE281:
 1548              	.LBE280:
 206:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda2)*/; k < (lda1 - lda3); k++)
 1549              		.loc 1 206 0
 1550 0d08 4183C201 		addl	$1, %r10d
 1551              	.LVL218:
 1552 0d0c 4501FE   		addl	%r15d, %r14d
 1553              	.LVL219:
 1554 0d0f 44036C24 		addl	-88(%rsp), %r13d
 1554      A8
 1555              	.LVL220:
GAS LISTING /tmp/cc55sAij.s 			page 45


 1556 0d14 443B5424 		cmpl	-96(%rsp), %r10d
 1556      A0
 1557 0d19 0F8C69FF 		jl	.L74
 1557      FFFF
 1558              	.LVL221:
 1559 0d1f 448B5424 		movl	-92(%rsp), %r10d
 1559      A4
 1560              	.LVL222:
 1561 0d24 448B5C24 		movl	-76(%rsp), %r11d
 1561      B4
 1562              	.LVL223:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1563              		.loc 1 126 0
 1564 0d29 448B6424 		movl	-96(%rsp), %r12d
 1564      A0
 1565              	.LVL224:
 1566              	.L71:
 215:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 216:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 217:matmultbintrinsics.c **** 		}
 218:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 219:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 220:matmultbintrinsics.c **** 	}
 221:matmultbintrinsics.c **** 
 222:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda3)*/; k < (lda1 - 1); k++)
 1567              		.loc 1 223 0
 1568 0d2e 448B7C24 		movl	-80(%rsp), %r15d
 1568      B0
 1569 0d33 4183EF01 		subl	$1, %r15d
 1570 0d37 4539FC   		cmpl	%r15d, %r12d
 1571 0d3a 0F8DF000 		jge	.L75
 1571      0000
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1572              		.loc 1 126 0
 1573 0d40 8B4C2450 		movl	80(%rsp), %ecx
 1574 0d44 894C24A8 		movl	%ecx, -88(%rsp)
 1575 0d48 4189CE   		movl	%ecx, %r14d
 1576 0d4b 450FAFF4 		imull	%r12d, %r14d
 1577 0d4f 89C8     		movl	%ecx, %eax
 1578 0d51 0FAFC1   		imull	%ecx, %eax
 1579 0d54 894424A0 		movl	%eax, -96(%rsp)
 1580 0d58 4189C5   		movl	%eax, %r13d
 1581 0d5b 450FAFEC 		imull	%r12d, %r13d
 1582              	.LBB282:
 1583              	.LBB283:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1584              		.loc 2 78 0
 1585 0d5f 660F57ED 		xorpd	%xmm5, %xmm5
 1586              	.LBE283:
 1587              	.LBE282:
 1588              	.LBB285:
 1589              	.LBB286:
 1590 0d63 660F28F5 		movapd	%xmm5, %xmm6
 1591              	.LBE286:
 1592              	.LBE285:
 223:matmultbintrinsics.c **** 	{
 224:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
GAS LISTING /tmp/cc55sAij.s 			page 46


 225:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 226:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 227:matmultbintrinsics.c **** 		for(l=0;l<nos-2;l++)
 1593              		.loc 1 228 0
 1594 0d67 4183EA02 		subl	$2, %r10d
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1595              		.loc 2 113 0
 1596 0d6b 4C8D4C24 		leaq	-72(%rsp), %r9
 1596      B8
 1597 0d70 44896424 		movl	%r12d, -92(%rsp)
 1597      A4
 1598 0d75 44895C24 		movl	%r11d, -76(%rsp)
 1598      B4
 1599 0d7a 4589E3   		movl	%r12d, %r11d
 1600              	.LVL225:
 1601              	.L78:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1602              		.loc 1 126 0
 1603 0d7d 4589F4   		movl	%r14d, %r12d
 1604              	.LVL226:
 1605 0d80 4489E8   		movl	%r13d, %eax
 1606              	.LVL227:
 1607              	.LBB288:
 1608              	.LBB284:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1609              		.loc 2 78 0
 1610 0d83 660F28D5 		movapd	%xmm5, %xmm2
 1611              	.LVL228:
 1612              	.LBE284:
 1613              	.LBE288:
 1614              	.LBB289:
 1615              	.LBB287:
 1616 0d87 660F28CE 		movapd	%xmm6, %xmm1
 1617              	.LVL229:
 1618              	.LBE287:
 1619              	.LBE289:
 1620              		.loc 1 228 0
 1621 0d8b 4585D2   		testl	%r10d, %r10d
 1622 0d8e 7E60     		jle	.L76
 228:matmultbintrinsics.c **** 		{
 229:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 1623              		.loc 1 230 0
 1624 0d90 4D63C6   		movslq	%r14d, %r8
 1625 0d93 49C1E003 		salq	$3, %r8
 230:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 1626              		.loc 1 231 0
 1627 0d97 4898     		cltq
 1628 0d99 488D2CC5 		leaq	0(,%rax,8), %rbp
 1628      00000000 
 231:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1629              		.loc 1 232 0
 1630 0da1 488D34C5 		leaq	16(,%rax,8), %rsi
 1630      10000000 
 1631 0da9 B8000000 		movl	$0, %eax
 1631      00
 1632 0dae B9000000 		movl	$0, %ecx
 1632      00
GAS LISTING /tmp/cc55sAij.s 			page 47


 1633              	.LVL230:
 1634              	.L77:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1635              		.loc 2 113 0
 1636 0db3 4C89C3   		movq	%r8, %rbx
 1637 0db6 49031C01 		addq	(%r9,%rax), %rbx
 1638              	.LBB290:
 1639              	.LBB291:
 1640 0dba 660F1003 		movupd	(%rbx), %xmm0
 1641              	.LVL231:
 1642              	.LBE291:
 1643              	.LBE290:
 1644 0dbe 4889EB   		movq	%rbp, %rbx
 1645 0dc1 48031C07 		addq	(%rdi,%rax), %rbx
 1646              	.LBB292:
 1647              	.LBB293:
 1648 0dc5 660F1023 		movupd	(%rbx), %xmm4
 1649              	.LVL232:
 1650              	.LBE293:
 1651              	.LBE292:
 1652 0dc9 4889F3   		movq	%rsi, %rbx
 1653 0dcc 48031C07 		addq	(%rdi,%rax), %rbx
 1654              	.LBB294:
 1655              	.LBB295:
 1656 0dd0 660F101B 		movupd	(%rbx), %xmm3
 1657              	.LVL233:
 1658              	.LBE295:
 1659              	.LBE294:
 1660              	.LBB296:
 1661              	.LBB297:
 1662              		.loc 2 254 0
 1663 0dd4 660F59E0 		mulpd	%xmm0, %xmm4
 1664              	.LVL234:
 1665              	.LBE297:
 1666              	.LBE296:
 1667              	.LBB298:
 1668              	.LBB299:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1669              		.loc 2 230 0
 1670 0dd8 660F58D4 		addpd	%xmm4, %xmm2
 1671              	.LVL235:
 1672              	.LBE299:
 1673              	.LBE298:
 1674              	.LBB300:
 1675              	.LBB301:
 1676              		.loc 2 254 0
 1677 0ddc 660F59C3 		mulpd	%xmm3, %xmm0
 1678              	.LVL236:
 1679              	.LBE301:
 1680              	.LBE300:
 1681              	.LBB302:
 1682              	.LBB303:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1683              		.loc 2 230 0
 1684 0de0 660F58C8 		addpd	%xmm0, %xmm1
 1685              	.LVL237:
 1686              	.LBE303:
GAS LISTING /tmp/cc55sAij.s 			page 48


 1687              	.LBE302:
 228:matmultbintrinsics.c **** 		for(l=0;l<nos-2;l++)
 1688              		.loc 1 228 0
 1689 0de4 83C101   		addl	$1, %ecx
 1690              	.LVL238:
 1691 0de7 4883C008 		addq	$8, %rax
 1692              	.LVL239:
 1693 0deb 4139CA   		cmpl	%ecx, %r10d
 1694 0dee 7FC3     		jg	.L77
 1695              	.LVL240:
 1696              	.L76:
 1697              	.LBB304:
 1698              	.LBB305:
 1699              		.loc 3 87 0
 1700 0df0 660F7CD1 		haddpd	%xmm1, %xmm2
 1701              	.LVL241:
 1702              	.LBE305:
 1703              	.LBE304:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1704              		.loc 2 155 0
 1705 0df4 4D63E4   		movslq	%r12d, %r12
 1706              	.LBB306:
 1707              	.LBB307:
 1708 0df7 66420F11 		movupd	%xmm2, (%rdx,%r12,8)
 1708      14E2
 1709              	.LBE307:
 1710              	.LBE306:
 223:matmultbintrinsics.c **** 	for(/*k = (lda1 - lda3)*/; k < (lda1 - 1); k++)
 1711              		.loc 1 223 0
 1712 0dfd 4183C301 		addl	$1, %r11d
 1713              	.LVL242:
 1714 0e01 44037424 		addl	-88(%rsp), %r14d
 1714      A8
 1715              	.LVL243:
 1716 0e06 44036C24 		addl	-96(%rsp), %r13d
 1716      A0
 1717              	.LVL244:
 1718 0e0b 4539DF   		cmpl	%r11d, %r15d
 1719 0e0e 0F8F69FF 		jg	.L78
 1719      FFFF
 1720              	.LVL245:
 1721 0e14 448B6424 		movl	-92(%rsp), %r12d
 1721      A4
 1722              	.LVL246:
 1723 0e19 448B5C24 		movl	-76(%rsp), %r11d
 1723      B4
 1724              	.LVL247:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1725              		.loc 1 126 0
 1726 0e1e 4489E0   		movl	%r12d, %eax
 1727 0e21 F7D0     		notl	%eax
 1728 0e23 8B4C24B0 		movl	-80(%rsp), %ecx
 1729 0e27 8D4401FF 		leal	-1(%rcx,%rax), %eax
 1730 0e2b 468D6420 		leal	1(%rax,%r12), %r12d
 1730      01
 1731              	.LVL248:
 1732              	.L75:
GAS LISTING /tmp/cc55sAij.s 			page 49


 232:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 233:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 234:matmultbintrinsics.c **** 		}
 235:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 236:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 237:matmultbintrinsics.c **** 	}
 238:matmultbintrinsics.c **** 
 239:matmultbintrinsics.c **** 	for(/*k = (lda1 - 1)*/; k < (lda1); k++)
 1733              		.loc 1 240 0
 1734 0e30 44396424 		cmpl	%r12d, -80(%rsp)
 1734      B0
 1735 0e35 0F8EC200 		jle	.L79
 1735      0000
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1736              		.loc 1 126 0
 1737 0e3b 448B7C24 		movl	80(%rsp), %r15d
 1737      50
 1738 0e40 4589E5   		movl	%r12d, %r13d
 1739 0e43 450FAFEF 		imull	%r15d, %r13d
 1740 0e47 4489F8   		movl	%r15d, %eax
 1741 0e4a 410FAFC7 		imull	%r15d, %eax
 1742 0e4e 894424AC 		movl	%eax, -84(%rsp)
 1743 0e52 4189C2   		movl	%eax, %r10d
 1744 0e55 450FAFD4 		imull	%r12d, %r10d
 1745              	.LBB308:
 1746              	.LBB309:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1747              		.loc 2 78 0
 1748 0e59 660F57ED 		xorpd	%xmm5, %xmm5
 1749              	.LBE309:
 1750              	.LBE308:
 1751              	.LBB311:
 1752              	.LBB312:
 1753 0e5d 660F28F5 		movapd	%xmm5, %xmm6
 1754              	.LBE312:
 1755              	.LBE311:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1756              		.loc 2 113 0
 1757 0e61 4C8D4C24 		leaq	-72(%rsp), %r9
 1757      B8
 1758              	.L82:
 126:matmultbintrinsics.c **** PetscInt BSG_MatMult_2(PetscScalar ** ct, PetscScalar * x, PetscScalar * y, PetscInt * idx, PetscIn
 1759              		.loc 1 126 0
 1760 0e66 4589EE   		movl	%r13d, %r14d
 1761              	.LVL249:
 1762 0e69 4489D0   		movl	%r10d, %eax
 1763              	.LVL250:
 1764              	.LBB314:
 1765              	.LBB310:
  78:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __extension__ (__m128d){ __X, __W };
 1766              		.loc 2 78 0
 1767 0e6c 660F28D5 		movapd	%xmm5, %xmm2
 1768              	.LVL251:
 1769              	.LBE310:
 1770              	.LBE314:
 1771              	.LBB315:
 1772              	.LBB313:
GAS LISTING /tmp/cc55sAij.s 			page 50


 1773 0e70 660F28CE 		movapd	%xmm6, %xmm1
 1774              	.LVL252:
 1775              	.LBE313:
 1776              	.LBE315:
 240:matmultbintrinsics.c **** 	{
 241:matmultbintrinsics.c ****                 t1= k*dof; t2 = t1*dof;
 242:matmultbintrinsics.c **** 		msum0 =_mm_set_pd(0,0);
 243:matmultbintrinsics.c **** 		msum1 =_mm_set_pd(0,0);
 244:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 1777              		.loc 1 245 0
 1778 0e74 4585DB   		testl	%r11d, %r11d
 1779 0e77 7860     		js	.L80
 245:matmultbintrinsics.c **** 		{
 246:matmultbintrinsics.c **** 			mx0 = _mm_loadu_pd(xt[l]+t1);
 1780              		.loc 1 247 0
 1781 0e79 4D63C5   		movslq	%r13d, %r8
 1782 0e7c 49C1E003 		salq	$3, %r8
 247:matmultbintrinsics.c **** 			mc0 = _mm_loadu_pd(ct[l]+t2);
 1783              		.loc 1 248 0
 1784 0e80 4898     		cltq
 1785 0e82 488D2CC5 		leaq	0(,%rax,8), %rbp
 1785      00000000 
 248:matmultbintrinsics.c **** 			mc1 = _mm_loadu_pd(ct[l]+t2+2);
 1786              		.loc 1 249 0
 1787 0e8a 488D34C5 		leaq	16(,%rax,8), %rsi
 1787      10000000 
 1788 0e92 B8000000 		movl	$0, %eax
 1788      00
 1789 0e97 B9000000 		movl	$0, %ecx
 1789      00
 1790              	.LVL253:
 1791              	.L81:
 113:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return __builtin_ia32_loadupd (__P);
 1792              		.loc 2 113 0
 1793 0e9c 4C89C3   		movq	%r8, %rbx
 1794 0e9f 49031C01 		addq	(%r9,%rax), %rbx
 1795              	.LBB316:
 1796              	.LBB317:
 1797 0ea3 660F1003 		movupd	(%rbx), %xmm0
 1798              	.LVL254:
 1799              	.LBE317:
 1800              	.LBE316:
 1801 0ea7 4889EB   		movq	%rbp, %rbx
 1802 0eaa 48031C07 		addq	(%rdi,%rax), %rbx
 1803              	.LBB318:
 1804              	.LBB319:
 1805 0eae 660F1023 		movupd	(%rbx), %xmm4
 1806              	.LVL255:
 1807              	.LBE319:
 1808              	.LBE318:
 1809 0eb2 4889F3   		movq	%rsi, %rbx
 1810 0eb5 48031C07 		addq	(%rdi,%rax), %rbx
 1811              	.LBB320:
 1812              	.LBB321:
 1813 0eb9 660F101B 		movupd	(%rbx), %xmm3
 1814              	.LVL256:
 1815              	.LBE321:
GAS LISTING /tmp/cc55sAij.s 			page 51


 1816              	.LBE320:
 1817              	.LBB322:
 1818              	.LBB323:
 1819              		.loc 2 254 0
 1820 0ebd 660F59E0 		mulpd	%xmm0, %xmm4
 1821              	.LVL257:
 1822              	.LBE323:
 1823              	.LBE322:
 1824              	.LBB324:
 1825              	.LBB325:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1826              		.loc 2 230 0
 1827 0ec1 660F58D4 		addpd	%xmm4, %xmm2
 1828              	.LVL258:
 1829              	.LBE325:
 1830              	.LBE324:
 1831              	.LBB326:
 1832              	.LBB327:
 1833              		.loc 2 254 0
 1834 0ec5 660F59C3 		mulpd	%xmm3, %xmm0
 1835              	.LVL259:
 1836              	.LBE327:
 1837              	.LBE326:
 1838              	.LBB328:
 1839              	.LBB329:
 230:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   return (__m128d)__builtin_ia32_addpd ((__v2df)__A, (__v2df)__B);
 1840              		.loc 2 230 0
 1841 0ec9 660F58C8 		addpd	%xmm0, %xmm1
 1842              	.LVL260:
 1843              	.LBE329:
 1844              	.LBE328:
 245:matmultbintrinsics.c **** 		for(l=0;l<=mnos;l++)
 1845              		.loc 1 245 0
 1846 0ecd 83C101   		addl	$1, %ecx
 1847              	.LVL261:
 1848 0ed0 4883C008 		addq	$8, %rax
 1849              	.LVL262:
 1850 0ed4 4139CB   		cmpl	%ecx, %r11d
 1851 0ed7 7DC3     		jge	.L81
 1852              	.LVL263:
 1853              	.L80:
 1854              	.LBB330:
 1855              	.LBB331:
 1856              		.loc 3 87 0
 1857 0ed9 660F7CD1 		haddpd	%xmm1, %xmm2
 1858              	.LVL264:
 1859              	.LBE331:
 1860              	.LBE330:
 155:/usr/lib/gcc/x86_64-redhat-linux/4.4.6/include/emmintrin.h ****   __builtin_ia32_storeupd (__P, __A);
 1861              		.loc 2 155 0
 1862 0edd 4D63F6   		movslq	%r14d, %r14
 1863              	.LBB332:
 1864              	.LBB333:
 1865 0ee0 66420F11 		movupd	%xmm2, (%rdx,%r14,8)
 1865      14F2
 1866              	.LBE333:
 1867              	.LBE332:
GAS LISTING /tmp/cc55sAij.s 			page 52


 240:matmultbintrinsics.c **** 	for(/*k = (lda1 - 1)*/; k < (lda1); k++)
 1868              		.loc 1 240 0
 1869 0ee6 4183C401 		addl	$1, %r12d
 1870              	.LVL265:
 1871 0eea 4501FD   		addl	%r15d, %r13d
 1872              	.LVL266:
 1873 0eed 44035424 		addl	-84(%rsp), %r10d
 1873      AC
 1874              	.LVL267:
 1875 0ef2 44396424 		cmpl	%r12d, -80(%rsp)
 1875      B0
 1876 0ef7 0F8F69FF 		jg	.L82
 1876      FFFF
 1877              	.LVL268:
 1878              	.L79:
 249:matmultbintrinsics.c **** 			msum0 = _mm_add_pd(msum0, _mm_mul_pd(mx0,mc0));
 250:matmultbintrinsics.c **** 			msum1 = _mm_add_pd(msum1, _mm_mul_pd(mx0,mc1));
 251:matmultbintrinsics.c **** 		}
 252:matmultbintrinsics.c **** 		msum3 = _mm_hadd_pd(msum0,msum1);
 253:matmultbintrinsics.c **** 		_mm_storeu_pd(y+t1, msum3);
 254:matmultbintrinsics.c **** 	}
 255:matmultbintrinsics.c **** 	PetscFunctionReturn(0);
 256:matmultbintrinsics.c **** }
 1879              		.loc 1 257 0
 1880 0efd B8000000 		movl	$0, %eax
 1880      00
 1881 0f02 5B       		popq	%rbx
 1882              		.cfi_def_cfa_offset 48
 1883 0f03 5D       		popq	%rbp
 1884              		.cfi_def_cfa_offset 40
 1885 0f04 415C     		popq	%r12
 1886              		.cfi_def_cfa_offset 32
 1887              	.LVL269:
 1888 0f06 415D     		popq	%r13
 1889              		.cfi_def_cfa_offset 24
 1890 0f08 415E     		popq	%r14
 1891              		.cfi_def_cfa_offset 16
 1892 0f0a 415F     		popq	%r15
 1893              		.cfi_def_cfa_offset 8
 1894 0f0c C3       		ret
 1895              		.cfi_endproc
 1896              	.LFE589:
 1898              	.Letext0:
/usr/bin/ar cr /home/dpnkarthik/petsc-rnet/PETSC_RNET/lib/libpetsc.a matmultbintrinsics.o
if test -n ""; then /usr/bin/ar cr  matmultbintrinsics.lo; fi
/bin/rm -f matmultbintrinsics.o matmultbintrinsics.lo
