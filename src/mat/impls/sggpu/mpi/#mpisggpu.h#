#ifndef __MPI_SGGPU_H__
#define __MPI_SGGPU_H__

#include "petsc-private/matimpl.h"

#include <../src/mat/impls/sggpu/seq/sggpu.h>


// External decls
EXTERN_C_BEGIN
extern PetscErrorCode MatCreate_MPISGGPU(Mat);
extern PetscErrorCode checkCudaError(cudaError_t err);
EXTERN_C_END



typedef struct {

  PetscInt nvec; 
  //Mat		A;			// Column major storage of diagonals */
  Mat_SeqSGGPU  *mat_seq;

  PetscMPIInt   size;                   /* size of communicator */
  PetscMPIInt   rank; 			/* rank of proc in communicator */

  /* The following variables are used for matrix assembly */
  PetscBool     donotstash;             /* PETSC_TRUE if off processor entries dropped */
  MPI_Request   *send_waits;            /* array of send requests */
  MPI_Request   *recv_waits;            /* array of receive requests */
  PetscInt      nsends,nrecvs;          /* numbers of sends and receives */
  PetscScalar   *svalues,*rvalues;      /* sending and receiving data */
  PetscInt      rmax;                   /* maximum message length */

  /* The following variables are used for matrix-vector products */
  Vec           lvec;              	/* local vector */
  Vec           diag;
  VecScatter    Mvctx;             	/* scatter context for vector */
  PetscBool     roworiented;       	/* if true, row-oriented input, default true */


} Mat_MPISGGPU;



EXTERN_C_BEGIN
extern PetscErrorCode MatMPISGGPUSetPreallocation_MPISGGPU(Mat A,PetscInt nz, const PetscInt nnz[]);
EXTERN_C_END

#endif
